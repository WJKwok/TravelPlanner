{"ast":null,"code":"export const placeReducer = (state, action) => {\n  switch (action.type) {\n    case 'SHOW_PLACES':\n      const {\n        compiledData,\n        days,\n        location\n      } = action.search;\n      const placesLoaded = loadPlaces(state, compiledData, days, location);\n      return placesLoaded;\n\n    case 'ADD_EXTRA_DAY':\n      const extraDay = addExtraDay(state);\n      return extraDay;\n\n    case 'CHANGE_ORDER':\n      const {\n        newOrder\n      } = action.order;\n      return newOrder;\n\n    case 'LOAD_ITINERARY':\n      const {\n        itinerary\n      } = action.payload;\n      console.log(\"from reducer:\", itinerary);\n      loadItinerary(itinerary);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst loadItinerary = async itinerary => {\n  const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n  const dayPlans = itinerary.dayPlans;\n\n  for (var i = 0; i < dayPlans.length; i++) {\n    const placeIds = dayPlans[i].placeIds;\n\n    for (var j = 0; j < placeIds.length; j++) {\n      const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`);\n      const data = await response.json();\n      console.log(data);\n    }\n  }\n};\n\nconst addExtraDay = state => {\n  const nextColumnIndex = state.dayBoards.length;\n  const nextColumn = {\n    id: `day-${nextColumnIndex}`,\n    title: `Day ${nextColumnIndex + 1}`,\n    placeIds: []\n  };\n  const newState = { ...state,\n    days: nextColumnIndex + 1,\n    columns: { ...state.columns,\n      [`day-${nextColumnIndex}`]: nextColumn\n    },\n    dayBoards: [...state.dayBoards, `day-${nextColumnIndex}`]\n  };\n  console.log(newState);\n  return newState;\n};\n\nconst loadPlaces = (state, compiledData, days, location) => {\n  let columns = {};\n  let dayBoards = [];\n  let categoryBoards = [];\n\n  for (var i = 0; i < days; i++) {\n    var dataObject = {};\n    dataObject['id'] = `day-${i}`;\n    dataObject['title'] = `Day ${i + 1}`;\n    dataObject['placeIds'] = [];\n    columns[`day-${i}`] = dataObject;\n    dayBoards.push(`day-${i}`);\n  }\n\n  let placesFetched = {};\n  const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n\n  for (var c = 0; c < compiledData.length; c++) {\n    let data = compiledData[c];\n    let placeIds = [];\n\n    for (var j = 0; j < data.results.length; j++) {\n      //object structure of place card is set here\n      var placeObject = {};\n      placeObject['id'] = data.results[j].place_id;\n      placeObject['content'] = data.results[j].name;\n      placeObject['rating'] = data.results[j].rating;\n      placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n      placeObject['location'] = data.results[j].geometry.location; //console.log(placeObject);\n\n      placeIds.push(data.results[j].place_id);\n      placesFetched[data.results[j].place_id] = placeObject;\n    }\n\n    columns[`category-${c + 1}`] = {\n      id: `category-${c + 1}`,\n      title: `${placeTypes[c]}`,\n      placeIds: placeIds\n    };\n    categoryBoards.push(`category-${c + 1}`);\n  }\n\n  const newState = { ...state,\n    days: days,\n    location: location,\n    places: placesFetched,\n    columns: { ...state.columns,\n      ...columns\n    },\n    dayBoards: [...dayBoards],\n    categoryBoards: [...categoryBoards]\n  }; // console.log(newState);\n\n  return newState;\n};","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Store/placeReducer.js"],"names":["placeReducer","state","action","type","compiledData","days","location","search","placesLoaded","loadPlaces","extraDay","addExtraDay","newOrder","order","itinerary","payload","console","log","loadItinerary","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","dayPlans","i","length","placeIds","j","response","fetch","data","json","nextColumnIndex","dayBoards","nextColumn","id","title","newState","columns","categoryBoards","dataObject","push","placesFetched","placeTypes","c","results","placeObject","place_id","name","rating","photos","photo_reference","geometry","places"],"mappings":"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","sourcesContent":["export const placeReducer = (state, action) => {\n    switch (action.type) {\n        case 'SHOW_PLACES':\n            const { compiledData, days, location } = action.search;\n            const placesLoaded = loadPlaces(state, compiledData, days, location);\n            return placesLoaded;\n        case 'ADD_EXTRA_DAY':\n            const extraDay = addExtraDay(state);\n            return extraDay;\n        case 'CHANGE_ORDER':\n            const { newOrder } = action.order;\n            return newOrder;\n        case 'LOAD_ITINERARY':\n            const { itinerary } = action.payload\n            console.log(\"from reducer:\", itinerary);\n            loadItinerary(itinerary)\n            return state\n        default:\n            return state;\n    }\n}\n\nconst loadItinerary = async ( itinerary ) => {\n\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n    const dayPlans = itinerary.dayPlans;\n\n    for(var i = 0; i < dayPlans.length; i++) {\n        const placeIds = dayPlans[i].placeIds\n        for(var j = 0; j < placeIds.length; j++){\n            const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`)\n            const data = await response.json();\n            console.log(data);\n        }\n    }\n}\n\nconst addExtraDay = (state) => {\n\n    const nextColumnIndex = state.dayBoards.length;\n    const nextColumn = {\n        id: `day-${nextColumnIndex}`, \n        title: `Day ${nextColumnIndex + 1}`, \n        placeIds: []\n    }\n\n    const newState = {\n        ...state,\n        days: nextColumnIndex + 1,\n        columns: {\n            ...state.columns,\n            [`day-${nextColumnIndex}`]: nextColumn\n        },\n        dayBoards: [...state.dayBoards, `day-${nextColumnIndex}`],\n    }\n\n    console.log(newState);\n    return newState\n}\n\nconst loadPlaces = (state, compiledData, days, location) => {\n\n    let columns = {};\n    let dayBoards = [];\n    let categoryBoards = [];\n\n    for (var i = 0; i < days; i++) {\n        var dataObject = {};\n        dataObject['id'] = `day-${i}`;\n        dataObject['title'] = `Day ${i + 1}`;\n        dataObject['placeIds'] = [];\n\n        columns[`day-${i}`] = dataObject;\n        dayBoards.push(`day-${i}`);\n    }\n\n    let placesFetched = {};\n    const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n    \n    for (var c = 0; c < compiledData.length; c++){\n\n        let data = compiledData[c];\n        let placeIds = [];\n\n        for (var j = 0; j < data.results.length; j++) {\n\n            //object structure of place card is set here\n    \n            var placeObject = {};\n            placeObject['id'] = data.results[j].place_id;\n            placeObject['content'] = data.results[j].name;\n            placeObject['rating'] = data.results[j].rating;\n            placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n            placeObject['location'] = data.results[j].geometry.location;\n            \n            //console.log(placeObject);\n            placeIds.push(data.results[j].place_id);\n            placesFetched[data.results[j].place_id] = placeObject;\n        \n        }\n    \n        columns[`category-${c+1}`] = {\n            id: `category-${c+1}`,\n            title: `${placeTypes[c]}`,\n            placeIds: placeIds\n        }\n\n        categoryBoards.push(`category-${c+1}`);\n\n    } \n    \n    const newState = {\n        ...state,\n        days: days,\n        location: location,\n        places: placesFetched,\n        columns: {\n            ...state.columns,\n            ...columns,\n        },\n        dayBoards: [...dayBoards],\n        categoryBoards: [...categoryBoards],\n    }\n\n    // console.log(newState);\n    return newState;\n}"]},"metadata":{},"sourceType":"module"}