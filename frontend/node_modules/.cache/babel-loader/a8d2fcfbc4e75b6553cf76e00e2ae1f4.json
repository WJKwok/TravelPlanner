{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/frontend/src/Pages/itinerary.js\";\nimport React, { useState, useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, IconButton } from '@material-ui/core/';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\nimport DayBoard from '../Components/dayBoard';\nimport CategoryBoard from '../Components/categoryBoard';\nimport Form from '../Components/form';\nimport PlaceAutoComplete from '../Components/placeAutoComplete';\nimport { fetchCategories, fetchPlaceIds, fetchPlaceIdsDaybyDay } from '../Services/googlePlaceApi';\nimport { GET_USER_ITINERARIES } from '../utils/graphql';\nimport { PlaceContext } from '../Store/PlaceContext';\nimport { AuthContext } from '../Store/AuthContext';\nconst useStyles = makeStyles({\n  buttonDiv: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  saveButton: {\n    height: 53\n  },\n  addButton: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\"\n    }\n  }\n});\n\nfunction Itinerary(props) {\n  const {\n    authState\n  } = useContext(AuthContext);\n  const {\n    placeState,\n    dispatch\n  } = useContext(PlaceContext);\n  const [itineraryId, setItineraryId] = useState(props.match.params.itineraryId ? props.match.params.itineraryId : \"\");\n  const [saveError, setSaveError] = useState(\"\");\n  const classes = useStyles();\n  /* Causes infinite loop LOL\n  if (props.match.params.itineraryId) {\n      console.log('it is from the link');\n      setItineraryId(props.match.params.itineraryId);\n  };\n  */\n\n  async function fetchItineraryFromGoogle(data) {\n    dispatch({\n      type: \"CLEAR_STATE\"\n    });\n    const city = data.getItinerary.city;\n    const dayPlans = data.getItinerary.dayPlans;\n    dispatch({\n      type: \"LOAD_EMPTY_DAYS\",\n      payload: {\n        numberOfDays: dayPlans.length,\n        city\n      }\n    }); //await fetchPlaceIdsDaybyDay(dayPlans, dispatch)\n\n    const placesFetched = await fetchPlaceIds(dayPlans);\n    dispatch({\n      type: \"LOAD_ENTIRE_ITINERARY\",\n      payload: {\n        itinerary: data.getItinerary,\n        placesFetched\n      }\n    });\n    const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n    fetchCategories(placeTypes, city, dispatch);\n  } // unnecessary if you don't need to access 'data' else where\n  // const { data } = \n\n\n  useQuery(GET_ITINERARY, {\n    // just doen't seem to work\n    // skip: itineraryId !== placeState.itineraryId,\n    onCompleted(data) {\n      console.log('yes i fired again!!!', itineraryId);\n      console.log('place state id: ', placeState.itineraryId); // does not run when the component was not remounted and parameter in query does not change\n\n      if (itineraryId !== placeState.itineraryId) {\n        fetchItineraryFromGoogle(data);\n      }\n    },\n\n    variables: {\n      itineraryId\n    }\n  });\n  /* Tracking Changes in Data\n  While data is from useQuery, it is tagged to an id; and when you update the document via useMutation, this data changes! Even though the 'data' variable is not from there.\n  \n  useEffect(() => {\n      if(data){\n          fetchItineraryFromGoogle();\n      }\n  }, [data])\n  */\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = placeState.columns[source.droppableId];\n    const finish = placeState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = placeState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...placeState,\n        columns: { ...placeState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      console.log(newOrder);\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...placeState,\n      columns: { ...placeState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    console.log(newOrder);\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  let itinerary = [];\n  const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n  const [submitItinerary] = useMutation(mutation, {\n    // 'result' is the second parameter!\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: GET_USER_ITINERARIES,\n        variables: {\n          userId: authState.user.id\n        }\n      }); // writing to cache so that the query doesn't have to recall\n      // for queries with variables, it is impt to define it during write query, else it would be a different cache, and it wouldn't be read.\n\n      proxy.writeQuery({\n        query: GET_USER_ITINERARIES,\n        variables: {\n          userId: authState.user.id\n        },\n        data: {\n          getUserItineraries: [...data.getUserItineraries, result.data.submitItinerary]\n        }\n      });\n      console.log(\"trying to get query cache: \", data);\n      console.log(\"submitted itinerary\", result.data);\n\n      if (!itineraryId) {\n        setItineraryId(result.data.submitItinerary.id);\n      }\n\n      setSaveError(\"\");\n    },\n\n    onError(err) {\n      setSaveError(err.graphQLErrors[0].extensions.exception.stacktrace[0]);\n    },\n\n    variables: {\n      dayPlans: itinerary,\n      city: placeState.location,\n      id: itineraryId\n    }\n  });\n\n  const addExtraDay = () => {\n    dispatch({\n      type: 'ADD_EXTRA_DAY'\n    });\n  };\n\n  const saveItinerary = () => {\n    const days = placeState.dayBoards;\n\n    for (var i = 0; i < days.length; i++) {\n      itinerary.push({\n        placeIds: placeState.columns[days[i]].placeIds\n      });\n    } //console.log(itinerary);\n\n\n    submitItinerary();\n  };\n\n  console.log(placeState);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), itineraryId !== placeState.itineraryId ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Loading\") : \"\", placeState.days !== 0 ? React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"day-and-search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(PlaceAutoComplete, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"day-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, placeState.dayBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(DayBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    });\n  }), placeState.dayBoards.length > 0 ? React.createElement(IconButton, {\n    className: classes.addButton,\n    disableRipple: true,\n    disableFocusRipple: true,\n    onClick: addExtraDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(AddCircleOutlineRoundedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  })) : \"\")), React.createElement(\"div\", {\n    className: classes.buttonDiv,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.saveButton,\n    variant: \"outlined\",\n    size: \"medium\",\n    onClick: saveItinerary,\n    startIcon: React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, \"Save Itinerary\")), React.createElement(\"div\", {\n    className: classes.buttonDiv,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, saveError ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, saveError) : null), placeState.categoryBoards.length > 0 ? React.createElement(\"div\", {\n    className: \"place-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, placeState.categoryBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(CategoryBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    });\n  })) : null) : \"\");\n}\n\nconst SUBMIT_ITINERARY = gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`;\nexport default Itinerary;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/frontend/src/Pages/itinerary.js"],"names":["React","useState","useContext","DragDropContext","useQuery","useMutation","gql","makeStyles","Button","IconButton","SaveIcon","AddCircleOutlineRoundedIcon","DayBoard","CategoryBoard","Form","PlaceAutoComplete","fetchCategories","fetchPlaceIds","fetchPlaceIdsDaybyDay","GET_USER_ITINERARIES","PlaceContext","AuthContext","useStyles","buttonDiv","display","justifyContent","saveButton","height","addButton","backgroundColor","Itinerary","props","authState","placeState","dispatch","itineraryId","setItineraryId","match","params","saveError","setSaveError","classes","fetchItineraryFromGoogle","data","type","city","getItinerary","dayPlans","payload","numberOfDays","length","placesFetched","itinerary","placeTypes","GET_ITINERARY","onCompleted","console","log","variables","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","placeIds","splice","newColumn","newOrder","id","order","startplaceIds","newStart","finishplaceIds","newFinish","mutation","SAVE_ITINERARY","SUBMIT_ITINERARY","submitItinerary","update","proxy","readQuery","query","userId","user","writeQuery","getUserItineraries","onError","err","graphQLErrors","extensions","exception","stacktrace","location","addExtraDay","saveItinerary","days","dayBoards","i","push","map","columnId","places","placeId","categoryBoards"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, IconButton} from '@material-ui/core/';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\n\nimport DayBoard from '../Components/dayBoard';\nimport CategoryBoard from '../Components/categoryBoard';\nimport Form from '../Components/form';\nimport PlaceAutoComplete from '../Components/placeAutoComplete'\nimport { fetchCategories, fetchPlaceIds, fetchPlaceIdsDaybyDay } from '../Services/googlePlaceApi'\nimport { GET_USER_ITINERARIES } from '../utils/graphql'\n\nimport { PlaceContext } from '../Store/PlaceContext';\nimport { AuthContext } from '../Store/AuthContext';\n\n\nconst useStyles = makeStyles({\n    buttonDiv: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n    },\n    saveButton: {\n        height: 53,\n    },\n    addButton: {\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        },\n    },\n})\n\n\nfunction Itinerary(props) {\n\n    const { authState } = useContext(AuthContext);\n    const { placeState, dispatch } = useContext(PlaceContext);\n    const [ itineraryId, setItineraryId ] = useState(props.match.params.itineraryId ? props.match.params.itineraryId : \"\");\n    const [ saveError, setSaveError ] = useState(\"\")\n\n    const classes = useStyles();\n    \n    /* Causes infinite loop LOL\n    if (props.match.params.itineraryId) {\n        console.log('it is from the link');\n        setItineraryId(props.match.params.itineraryId);\n    };\n    */\n\n    async function fetchItineraryFromGoogle(data) {\n\n        dispatch({type:\"CLEAR_STATE\"});\n\n        const city = data.getItinerary.city;\n        const dayPlans = data.getItinerary.dayPlans;\n        dispatch({ type:\"LOAD_EMPTY_DAYS\", payload:{numberOfDays: dayPlans.length, city}})\n\n        //await fetchPlaceIdsDaybyDay(dayPlans, dispatch)\n        const placesFetched = await fetchPlaceIds(dayPlans);\n        dispatch({ type:\"LOAD_ENTIRE_ITINERARY\", payload:{itinerary: data.getItinerary, placesFetched}})\n\n        const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n        fetchCategories(placeTypes, city, dispatch);\n\n    }\n\n    // unnecessary if you don't need to access 'data' else where\n    // const { data } = \n    useQuery(GET_ITINERARY, {\n        // just doen't seem to work\n        // skip: itineraryId !== placeState.itineraryId,\n        onCompleted(data){\n            console.log('yes i fired again!!!', itineraryId);\n            console.log('place state id: ', placeState.itineraryId)\n            // does not run when the component was not remounted and parameter in query does not change\n            if (itineraryId !== placeState.itineraryId){\n                fetchItineraryFromGoogle(data);\n            }\n        },\n        variables: {itineraryId}\n    })\n\n    /* Tracking Changes in Data\n    While data is from useQuery, it is tagged to an id; and when you update the document via useMutation, this data changes! Even though the 'data' variable is not from there.\n    \n    useEffect(() => {\n        if(data){\n            fetchItineraryFromGoogle();\n        }\n    }, [data])\n    */\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = placeState.columns[source.droppableId];\n        const finish = placeState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = placeState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...placeState,\n                columns: {\n                    ...placeState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n            console.log(newOrder);\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...placeState,\n            columns: {\n                ...placeState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        console.log(newOrder);\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    let itinerary = [];\n    const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n    const [submitItinerary] = useMutation(mutation, {\n        // 'result' is the second parameter!\n        update(proxy, result){\n            const data = proxy.readQuery({\n                query: GET_USER_ITINERARIES,\n                variables: {\n                    userId: authState.user.id\n                }\n            });\n\n            // writing to cache so that the query doesn't have to recall\n            // for queries with variables, it is impt to define it during write query, else it would be a different cache, and it wouldn't be read.\n            proxy.writeQuery({\n                query: GET_USER_ITINERARIES,\n                variables: {\n                    userId: authState.user.id\n                },\n                data: {\n                    getUserItineraries: [...data.getUserItineraries, result.data.submitItinerary]\n                }\n            })\n            \n            console.log(\"trying to get query cache: \", data)\n            console.log(\"submitted itinerary\", result.data);\n\n            if (!itineraryId) {\n                setItineraryId(result.data.submitItinerary.id)\n            }\n            setSaveError(\"\");\n        },\n        onError(err){\n            setSaveError(err.graphQLErrors[0].extensions.exception.stacktrace[0]);\n        },\n        variables: {\n            dayPlans: itinerary,\n            city: placeState.location,\n            id: itineraryId\n        }\n    })\n\n    const addExtraDay = () => {\n        dispatch({type:'ADD_EXTRA_DAY'});\n    }\n\n    const saveItinerary = () => {\n        const days = placeState.dayBoards;\n        for (var i = 0; i < days.length; i ++){\n            itinerary.push({\n                placeIds: placeState.columns[days[i]].placeIds\n            });\n            \n        }\n        //console.log(itinerary);\n        submitItinerary();\n    }\n\n    console.log(placeState);\n\n    return (\n        <div>\n            <Form/>\n            {itineraryId !== placeState.itineraryId ? <p>Loading</p> : \"\"}\n            {placeState.days !== 0 \n            ? <DragDropContext onDragEnd={onDragEnd}>\n                <div className='day-and-search'>\n                    <PlaceAutoComplete/>\n                    \n                    <div className='day-boards-container'>\n                        {placeState.dayBoards.map(columnId => {\n                            const column = placeState.columns[columnId];\n                            const places = column.placeIds.map(placeId => \n                                placeState.places[placeId]\n                            );\n\n                            return <DayBoard key={column.id} column={column} places={places}/>\n                        })}\n                        {placeState.dayBoards.length > 0 ?\n                            <IconButton \n                                className={classes.addButton}\n                                disableRipple={true}\n                                disableFocusRipple={true}\n                                onClick={addExtraDay}>\n                                <AddCircleOutlineRoundedIcon />\n                            </IconButton>\n                            : \"\"}\n                    </div>\n                </div>\n                <div className={classes.buttonDiv}>\n                    <Button \n                        className={classes.saveButton}\n                        variant=\"outlined\" \n                        size=\"medium\" \n                        onClick={saveItinerary}\n                        startIcon={<SaveIcon />}\n                    >\n                        Save Itinerary\n                    </Button>\n                </div>\n                <div className={classes.buttonDiv}>\n                    {saveError ? <p>{saveError}</p> : null}\n                </div>\n                {placeState.categoryBoards.length > 0 \n                ? <div className='place-boards-container'>\n                    {placeState.categoryBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n                        return <CategoryBoard key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n                : null}\n                \n            </DragDropContext>\n            : \"\"}\n        </div>\n        \n    );\n\n}\n\nconst SUBMIT_ITINERARY =  gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`\n\nexport default Itinerary;"]},"metadata":{},"sourceType":"module"}