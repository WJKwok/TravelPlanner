{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/itineraries.js\";\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../Store/AuthContext';\n\nfunction Itineraries() {\n  const {\n    authState\n  } = useContext(AuthContext);\n  const {\n    loading,\n    data: {\n      getUserItineraries: itineraries\n    } = {}\n  } = useQuery(GET_USER_ITINERARIES, {\n    variables: {\n      userId: authState.user.id\n    }\n  });\n  console.log(itineraries);\n  let itineraryCards;\n\n  if (itineraries) {\n    itineraryCards = itineraries.map(itinerary => {\n      return React.createElement(Link, {\n        to: `/itinerary/${itinerary.id}`,\n        key: itinerary.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, itinerary.city, \": \", itinerary.id));\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Itineraries\"), itineraryCards);\n}\n\nconst GET_USER_ITINERARIES = gql`\n    query getUserItineraries(\n        $userId: ID!\n    ){\n        getUserItineraries(\n            userId: $userId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\n/* with parameters ^, without parameters\nconst GET_USER_ITINERARIES = gql`\n    query {\n        getUserItineraries{\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n*/\n\nexport default Itineraries;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/itineraries.js"],"names":["React","useContext","Link","useQuery","gql","AuthContext","Itineraries","authState","loading","data","getUserItineraries","itineraries","GET_USER_ITINERARIES","variables","userId","user","id","console","log","itineraryCards","map","itinerary","city"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,SAASC,WAAT,GAAuB;AAEnB,QAAM;AAAEC,IAAAA;AAAF,MAAgBN,UAAU,CAACI,WAAD,CAAhC;AAEA,QAAM;AACFG,IAAAA,OADE;AAEFC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,kBAAkB,EAAGC;AAAvB,QAAuC;AAF3C,MAGFR,QAAQ,CAACS,oBAAD,EAAuB;AAC/BC,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAEP,SAAS,CAACQ,IAAV,CAAeC;AADhB;AADoB,GAAvB,CAHZ;AASAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACA,MAAIQ,cAAJ;;AACA,MAAIR,WAAJ,EAAiB;AACbQ,IAAAA,cAAc,GAAGR,WAAW,CAACS,GAAZ,CAAiBC,SAAD,IAAe;AAChD,aAAO,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAG,cAAaA,SAAS,CAACL,EAAG,EAArC;AAAwC,QAAA,GAAG,EAAEK,SAAS,CAACL,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIK,SAAS,CAACC,IAAd,QAAsBD,SAAS,CAACL,EAAhC,CAA3D,CAAP;AACC,KAFgB,CAAjB;AAGH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEKG,cAFL,CADJ;AAMH;;AAED,MAAMP,oBAAoB,GAAGR,GAAI;;;;;;;;;;;;;;;;;CAAjC;AAmBA;;;;;;;;;;;;;;;;;AAiBA,eAAeE,WAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../Store/AuthContext';\n\nfunction Itineraries() {\n\n    const { authState } = useContext(AuthContext);\n\n    const {\n        loading,\n        data: { getUserItineraries : itineraries } = {}\n    } = useQuery(GET_USER_ITINERARIES, {\n        variables: {\n            userId: authState.user.id\n        }\n    });\n\n    console.log(itineraries);\n    let itineraryCards;\n    if (itineraries) {\n        itineraryCards = itineraries.map((itinerary) => {\n        return <Link to={`/itinerary/${itinerary.id}`} key={itinerary.id}><p>{itinerary.city}: {itinerary.id}</p></Link>\n        })\n    }\n    \n    return (\n        <div>\n            <h1>Itineraries</h1>\n            {itineraryCards}\n        </div>\n    );\n}\n\nconst GET_USER_ITINERARIES = gql`\n    query getUserItineraries(\n        $userId: ID!\n    ){\n        getUserItineraries(\n            userId: $userId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\n/* with parameters ^, without parameters\nconst GET_USER_ITINERARIES = gql`\n    query {\n        getUserItineraries{\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n*/\n\nexport default Itineraries;"]},"metadata":{},"sourceType":"module"}