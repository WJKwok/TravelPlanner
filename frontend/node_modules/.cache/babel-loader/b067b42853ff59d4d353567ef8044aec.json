{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nfunction Board(props) {\n  const [state, setState] = React.useState(initialData);\n  const [columns, setColumns] = React.useState({});\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = state.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newState = { ...state,\n        columns: { ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setState(newState);\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newState = { ...state,\n      columns: { ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    setState(newState);\n  };\n\n  const changeHandler = e => {\n    setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  const clickHandler = async () => {\n    console.log('hello'); // https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors \n    // added proxy in package.json \"proxy\": \"https://maps.googleapis.com/maps/api\"\n\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n    const place = state.place;\n    const type = state.type;\n    console.log(googlePlacesApi); // let response = await fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`)\n    // let data = await response.json()\n    // console.log(data.results.length);\n    // var placesFetched = {};\n    // var placeIds = [];\n    // for (var i = 0; i < data.results.length; i++) {\n    //     //object structure of place card is set here\n    //     var placeObject = {};\n    //     placeObject['id'] = `place-${i}`;\n    //     placeObject['content'] = data.results[i].name;\n    //     placeObject['rating'] = data.results[i].rating;\n    //     placeObject['photoRef'] = data.results[i].photos[0].photo_reference;\n    //     console.log(placeObject);\n    //     placeIds.push(`place-${i}`);\n    //     placesFetched[`place-${i}`] = placeObject;\n    //     //try requesting photo\n    //     // /place/photo?maxwidth=400&photoreference=&key=YOUR_API_KEY\n    //     // let imgResponse = await fetch(`/place/photo?maxwidth=1600&photoreference=${photoReference}&key=${googlePlacesApi}`)\n    //     // console.log(imgResponse);\n    // }\n    // const newState1 = {\n    //     ...state,\n    //     places: placesFetched,\n    //     columns: {\n    //         ...state.columns,\n    //         'data-1': {\n    //             ...state.columns['data-1'],\n    //             placeIds: placeIds\n    //         }\n    //     }\n    // }\n    // setState(newState1);\n\n    fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`).then(res => res.json()).then(data => {\n      console.log(data.results);\n      var placesFetched = {};\n      var placeIds = [];\n\n      for (var i = 0; i < data.results.length; i++) {\n        //object structure of place card is set here\n        var placeObject = {};\n        placeObject['id'] = `place-${i}`;\n        placeObject['content'] = data.results[i].name;\n        placeObject['rating'] = data.results[i].rating;\n        placeObject['photoRef'] = data.results[i].photos ? data.results[i].photos[0].photo_reference : \"0\";\n        console.log(placeObject);\n        placeIds.push(`place-${i}`);\n        placesFetched[`place-${i}`] = placeObject;\n      }\n\n      const newState = { ...state,\n        places: placesFetched,\n        columns: { ...state.columns,\n          'data-1': { ...state.columns['data-1'],\n            placeIds: placeIds\n          }\n        }\n      };\n      setState(newState);\n    }).catch(error => console.error(error)); //setting number of columns\n\n    const columnsCount = state.number;\n    var columns = {};\n    var columnOrder = [];\n\n    for (var i = 0; i < columnsCount; i++) {\n      var dataObject = {};\n      dataObject['id'] = `column-${i}`;\n      dataObject['title'] = `Day ${i + 1}`;\n      dataObject['placeIds'] = [];\n      columns[`column-${i}`] = dataObject;\n      columnOrder.push(`column-${i}`);\n    }\n\n    const newState = { ...state,\n      columns: { ...state.columns,\n        ...columns\n      },\n      columnOrder: [...columnOrder]\n    };\n    setState(newState);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"select-css\",\n    id: \"type\",\n    value: state.type,\n    onChange: changeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"Restaurants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"Restaurants\"), React.createElement(\"option\", {\n    value: \"Hotels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"Hotels\"), React.createElement(\"option\", {\n    value: \"Tourist+attraction\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"Tourist+attraction\")), React.createElement(\"input\", {\n    id: \"place\",\n    placeholder: \"City\",\n    type: \"text\",\n    value: state.place,\n    onChange: changeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"number\",\n    placeholder: \"No. of Days\",\n    type: \"text\",\n    value: state.number,\n    onChange: changeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: clickHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, state.columnOrder.map(columnId => {\n    const column = state.columns[columnId];\n    const places = column.placeIds.map(placeId => state.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, state.dataColumn.map(columnId => {\n    const column = state.columns[columnId];\n    const places = column.placeIds.map(placeId => state.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    });\n  }))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js"],"names":["React","Component","DragDropContext","initialData","Column","Board","props","state","setState","useState","columns","setColumns","onDragEnd","result","destination","source","draggableId","droppableId","index","start","finish","column","newplaceIds","Array","from","placeIds","splice","newColumn","newState","id","startplaceIds","newStart","finishplaceIds","newFinish","changeHandler","e","target","value","clickHandler","console","log","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","place","type","fetch","then","res","json","data","results","placesFetched","i","length","placeObject","name","rating","photos","photo_reference","push","places","catch","error","columnsCount","number","columnOrder","dataObject","map","columnId","placeId","dataColumn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nfunction Board(props) {\n\n    const [state, setState] = React.useState(initialData);\n    const [columns, setColumns] = React.useState({});\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = state.columns[source.droppableId];\n        const finish = state.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = state.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newState = {\n                ...state,\n                columns: {\n                    ...state.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            setState(newState);\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newState = {\n            ...state,\n            columns: {\n                ...state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        setState(newState);\n    };\n\n    const changeHandler = (e) => {\n        setState({\n            [e.target.id]: e.target.value\n        })\n    };\n\n    const clickHandler = async () => {\n        console.log('hello');\n\n        // https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors \n        // added proxy in package.json \"proxy\": \"https://maps.googleapis.com/maps/api\"\n        const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n        const place = state.place;\n        const type = state.type;\n        console.log(googlePlacesApi);\n\n        // let response = await fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`)\n        // let data = await response.json()\n\n        // console.log(data.results.length);\n\n        // var placesFetched = {};\n        // var placeIds = [];\n        \n        // for (var i = 0; i < data.results.length; i++) {\n\n        //     //object structure of place card is set here\n\n        //     var placeObject = {};\n        //     placeObject['id'] = `place-${i}`;\n        //     placeObject['content'] = data.results[i].name;\n        //     placeObject['rating'] = data.results[i].rating;\n        //     placeObject['photoRef'] = data.results[i].photos[0].photo_reference;\n        //     console.log(placeObject);\n        //     placeIds.push(`place-${i}`);\n        //     placesFetched[`place-${i}`] = placeObject;\n\n            \n        //     //try requesting photo\n        //     // /place/photo?maxwidth=400&photoreference=&key=YOUR_API_KEY\n        //     // let imgResponse = await fetch(`/place/photo?maxwidth=1600&photoreference=${photoReference}&key=${googlePlacesApi}`)\n        //     // console.log(imgResponse);\n        \n        \n        // }\n        \n\n        // const newState1 = {\n        //     ...state,\n        //     places: placesFetched,\n        //     columns: {\n        //         ...state.columns,\n        //         'data-1': {\n        //             ...state.columns['data-1'],\n        //             placeIds: placeIds\n\n        //         }\n        //     }\n        // }\n\n        // setState(newState1);\n\n\n        fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data.results)\n\n                var placesFetched = {};\n                var placeIds = [];\n                \n                for (var i = 0; i < data.results.length; i++) {\n\n                    //object structure of place card is set here\n\n                    var placeObject = {};\n                    placeObject['id'] = `place-${i}`;\n                    placeObject['content'] = data.results[i].name;\n                    placeObject['rating'] = data.results[i].rating;\n                    placeObject['photoRef'] = data.results[i].photos ? data.results[i].photos[0].photo_reference : \"0\";\n                    console.log(placeObject);\n                    placeIds.push(`place-${i}`);\n                    placesFetched[`place-${i}`] = placeObject;\n                \n                }\n                \n                const newState = {\n                    ...state,\n                    places: placesFetched,\n                    columns: {\n                        ...state.columns,\n                        'data-1': {\n                            ...state.columns['data-1'],\n                            placeIds: placeIds\n\n                        }\n                    }\n                }\n\n                setState(newState);\n            })\n            .catch(error => console.error(error))\n\n        //setting number of columns\n\n        const columnsCount = state.number;\n\n        var columns = {};\n        var columnOrder = [];\n\n        for (var i = 0; i < columnsCount; i++) {\n            var dataObject = {};\n            dataObject['id'] = `column-${i}`;\n            dataObject['title'] = `Day ${i + 1}`;\n            dataObject['placeIds'] = [];\n\n            columns[`column-${i}`] = dataObject;\n            columnOrder.push(`column-${i}`);\n        }\n\n        const newState = {\n            ...state,\n            columns: {\n                ...state.columns,\n                ...columns,\n            },\n            columnOrder: [...columnOrder],\n        }\n\n        setState(newState);\n    };\n\n    return (\n        <div>\n            <div>\n                <select className=\"select-css\" id='type' value={state.type} onChange={changeHandler}>\n                    <option value=\"Restaurants\">Restaurants</option>\n                    <option value=\"Hotels\">Hotels</option>\n                    <option value=\"Tourist+attraction\">Tourist+attraction</option>\n                </select>\n                <input id='place' placeholder='City' type=\"text\" value={state.place} onChange={changeHandler}/>\n                <input id='number' placeholder='No. of Days' type=\"text\" value={state.number} onChange={changeHandler}/>\n                <button type='submit' onClick={clickHandler}>Submit</button>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='container'>\n                    {state.columnOrder.map(columnId => {\n                        const column = state.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            state.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n                <div className='container'>\n                    {state.dataColumn.map(columnId => {\n                        const column = state.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            state.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}