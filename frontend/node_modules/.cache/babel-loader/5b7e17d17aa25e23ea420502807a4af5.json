{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nclass Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId]; //if moving within the same column\n\n      if (start === finish) {\n        const column = this.state.columns[source.droppableId];\n        const newTaskIds = Array.from(column.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...column,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } //moving from one list to another\n\n\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n\n    this.clickHandler = () => {\n      console.log('hello');\n      console.log(this.state);\n      const columnsCount = this.state.columnOrder.length + 2;\n      const columns = this.state.columnOrder;\n      const newColumns = columns.push(`column-${columnsCount}`);\n      console.log(newColumns); // const newState = {\n      //     ...this.state,\n      //     columns: {\n      //         ...this.state.columns,\n      //         'column-4': {\n      //             id: 'column-4',\n      //             title: 'the end',\n      //             taskIds: [],\n      //         },\n      //     },\n      //     columnOrder: ['column-2', 'column-3', 'column-4'],\n      // }\n      // this.setState(newState);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.clickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Add column\"), React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.columnOrder.map(columnId => {\n      const column = this.state.columns[columnId];\n      const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      return React.createElement(Column, {\n        key: column.id,\n        column: column,\n        tasks: tasks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.state.dataColumn.map(columnId => {\n      const column = this.state.columns[columnId];\n      const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      return React.createElement(Column, {\n        key: column.id,\n        column: column,\n        tasks: tasks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      });\n    }))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js"],"names":["React","Component","DragDropContext","initialData","Column","Board","state","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","column","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","clickHandler","console","log","columnsCount","columnOrder","length","newColumns","push","render","map","columnId","tasks","taskId","dataColumn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nclass Board extends Component {\n    state = initialData;\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = this.state.columns[source.droppableId];\n            const newTaskIds = Array.from(column.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                taskIds: newTaskIds,\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            this.setState(newState);\n            return;\n        }\n\n        //moving from one list to another\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds,\n        };\n\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        this.setState(newState);\n    };\n\n    clickHandler = () => {\n        console.log('hello');\n        console.log(this.state);\n\n        const columnsCount = this.state.columnOrder.length + 2;\n        const columns = this.state.columnOrder;\n        const newColumns = columns.push(`column-${columnsCount}`);\n\n        console.log(newColumns);\n        // const newState = {\n        //     ...this.state,\n        //     columns: {\n        //         ...this.state.columns,\n        //         'column-4': {\n        //             id: 'column-4',\n        //             title: 'the end',\n        //             taskIds: [],\n        //         },\n        //     },\n        //     columnOrder: ['column-2', 'column-3', 'column-4'],\n        // }\n\n        // this.setState(newState);\n    };\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.clickHandler}>Add column</button>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <div className='container'>\n                        {this.state.columnOrder.map(columnId => {\n                            const column = this.state.columns[columnId];\n                            const tasks = column.taskIds.map(taskId => \n                                this.state.tasks[taskId]\n                            );\n\n                            return <Column key={column.id} column={column} tasks={tasks}/>\n                        })}\n                    </div>\n                    <div className='container'>\n                        {this.state.dataColumn.map(columnId => {\n                            const column = this.state.columns[columnId];\n                            const tasks = column.taskIds.map(taskId => \n                                this.state.tasks[taskId]\n                            );\n\n                            return <Column key={column.id} column={column} tasks={tasks}/>\n                        })}\n                    </div>\n                </DragDropContext>\n            </div>\n            \n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}