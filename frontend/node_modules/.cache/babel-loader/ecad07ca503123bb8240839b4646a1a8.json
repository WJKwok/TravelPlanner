{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/frontend/src/Components/placeAutoComplete.js\";\nimport React, { useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { List, ListItem, ListItemText, TextField } from '@material-ui/core/';\nimport { PlaceContext } from '../Store/PlaceContext';\nimport SearchBoard from './searchBoard';\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    maxWidth: 400,\n    backgroundColor: '#f8f8f8',\n    '&:hover': {\n      backgroundColor: '#e3e3e3'\n    }\n  },\n  textField: {\n    width: 400\n  }\n});\n\nfunction PlaceAutoComplete() {\n  const {\n    placeState,\n    dispatch\n  } = useContext(PlaceContext);\n  const [searchState, setSearchState] = useState(\"\");\n  const [sugestionsState, setSuggestionState] = useState([]);\n  const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n  const coordinates = {\n    \"Berlin\": {\n      lat: 52.52,\n      lng: 13.40\n    },\n    \"Zurich\": {\n      lat: 47.37,\n      lng: 8.54\n    },\n    \"New+York\": {\n      lat: 40.7128,\n      lng: -74.0060\n    }\n  };\n  console.log(\"Hi from placeAutoComplete: \", placeState.location);\n\n  const searchHandler = async e => {\n    setSearchState(e.target.value);\n    const locationCoords = `${coordinates[placeState.location].lat},${coordinates[placeState.location].lng}`;\n    console.log(\"Hi from placeAutoComplete: \", locationCoords);\n    const response = await fetch(`/place/autocomplete/json?input=${e.target.value}&types=establishment&location=${locationCoords}&radius=500&key=${googlePlacesApi}`);\n    const data = await response.json();\n    setSuggestionState(data.predictions);\n    console.log(data);\n  };\n\n  const addCard = async placeId => {\n    const response = await fetch(`/place/details/json?placeid=${placeId}&key=${googlePlacesApi}`);\n    const placeData = await response.json();\n    let placeObject = {};\n    placeObject['id'] = placeId;\n    placeObject['content'] = placeData.result.name;\n    placeObject['rating'] = placeData.result.rating;\n    placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n    placeObject['location'] = placeData.result.geometry.location;\n    console.log(placeObject);\n    dispatch({\n      type: 'ADD_SEARCH_ITEM',\n      payload: {\n        placeObject\n      }\n    });\n    setSearchState(\"\");\n    setSuggestionState([]);\n  };\n\n  const searchBoard = () => {\n    const column = placeState.columns['searched-items'];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(SearchBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    });\n  };\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    className: classes.textField,\n    label: \"Place Search\",\n    value: searchState,\n    variant: \"outlined\",\n    onChange: searchHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, sugestionsState.map(suggestion => {\n    return React.createElement(ListItem, {\n      className: classes.root,\n      key: suggestion.place_id,\n      onClick: () => addCard(suggestion.place_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: suggestion.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  })), searchBoard());\n}\n\nexport default PlaceAutoComplete;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/frontend/src/Components/placeAutoComplete.js"],"names":["React","useState","useContext","makeStyles","List","ListItem","ListItemText","TextField","PlaceContext","SearchBoard","useStyles","root","width","maxWidth","backgroundColor","textField","PlaceAutoComplete","placeState","dispatch","searchState","setSearchState","sugestionsState","setSuggestionState","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","coordinates","lat","lng","console","log","location","searchHandler","e","target","value","locationCoords","response","fetch","data","json","predictions","addCard","placeId","placeData","placeObject","result","name","rating","photos","photo_reference","geometry","type","payload","searchBoard","column","columns","places","placeIds","map","id","classes","suggestion","place_id","description"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,YAAzB,EAAuCC,SAAvC,QAAyD,oBAAzD;AAEA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAC;AACzBQ,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,MADL;AAEFC,IAAAA,QAAQ,EAAE,GAFR;AAGFC,IAAAA,eAAe,EAAE,SAHf;AAIF,eAAW;AACPA,MAAAA,eAAe,EAAE;AADV;AAJT,GADmB;AASzBC,EAAAA,SAAS,EAAE;AACPH,IAAAA,KAAK,EAAE;AADA;AATc,CAAD,CAA5B;;AAeA,SAASI,iBAAT,GAA6B;AAEzB,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA2BhB,UAAU,CAACM,YAAD,CAA3C;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAMsB,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAApC;AAEA,QAAMC,WAAW,GAAG;AAChB,cAAU;AACNC,MAAAA,GAAG,EAAE,KADC;AAENC,MAAAA,GAAG,EAAE;AAFC,KADM;AAKhB,cAAU;AACND,MAAAA,GAAG,EAAE,KADC;AAENC,MAAAA,GAAG,EAAE;AAFC,KALM;AAShB,gBAAY;AACRD,MAAAA,GAAG,EAAE,OADG;AAERC,MAAAA,GAAG,EAAE,CAAC;AAFE;AATI,GAApB;AAeAC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2Cd,UAAU,CAACe,QAAtD;;AAEA,QAAMC,aAAa,GAAG,MAAOC,CAAP,IAAa;AAC/Bd,IAAAA,cAAc,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACA,UAAMC,cAAc,GAAI,GAAEV,WAAW,CAACV,UAAU,CAACe,QAAZ,CAAX,CAAiCJ,GAAI,IAAGD,WAAW,CAACV,UAAU,CAACe,QAAZ,CAAX,CAAiCH,GAAI,EAAvG;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CM,cAA3C;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCL,CAAC,CAACC,MAAF,CAASC,KAAM,iCAAgCC,cAAe,mBAAkBd,eAAgB,EAAnI,CAA5B;AACA,UAAMiB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAnB,IAAAA,kBAAkB,CAACkB,IAAI,CAACE,WAAN,CAAlB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACH,GARD;;AAUA,QAAMG,OAAO,GAAG,MAAOC,OAAP,IAAmB;AAE/B,UAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BK,OAAQ,QAAOrB,eAAgB,EAA/D,CAA5B;AACA,UAAMsB,SAAS,GAAG,MAAMP,QAAQ,CAACG,IAAT,EAAxB;AAEA,QAAIK,WAAW,GAAG,EAAlB;AACAA,IAAAA,WAAW,CAAC,IAAD,CAAX,GAAoBF,OAApB;AACAE,IAAAA,WAAW,CAAC,SAAD,CAAX,GAAyBD,SAAS,CAACE,MAAV,CAAiBC,IAA1C;AACAF,IAAAA,WAAW,CAAC,QAAD,CAAX,GAAwBD,SAAS,CAACE,MAAV,CAAiBE,MAAzC;AACAH,IAAAA,WAAW,CAAC,UAAD,CAAX,GAA0BD,SAAS,CAACE,MAAV,CAAiBG,MAAjB,GAA0BL,SAAS,CAACE,MAAV,CAAiBG,MAAjB,CAAwB,CAAxB,EAA2BC,eAArD,GAAuE,GAAjG;AACAL,IAAAA,WAAW,CAAC,UAAD,CAAX,GAA0BD,SAAS,CAACE,MAAV,CAAiBK,QAAjB,CAA0BpB,QAApD;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAYe,WAAZ;AACA5B,IAAAA,QAAQ,CAAC;AAACmC,MAAAA,IAAI,EAAC,iBAAN;AAAyBC,MAAAA,OAAO,EAAC;AAACR,QAAAA;AAAD;AAAjC,KAAD,CAAR;AACA1B,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACH,GAhBD;;AAkBA,QAAMiC,WAAW,GAAG,MAAM;AACtB,UAAMC,MAAM,GAAGvC,UAAU,CAACwC,OAAX,CAAmB,gBAAnB,CAAf;AACA,UAAMC,MAAM,GAAGF,MAAM,CAACG,QAAP,CAAgBC,GAAhB,CAAoBhB,OAAO,IACtC3B,UAAU,CAACyC,MAAX,CAAkBd,OAAlB,CADW,CAAf;AAIA,WAAO,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEY,MAAM,CAACK,EAAzB;AAA6B,MAAA,MAAM,EAAEL,MAArC;AAA6C,MAAA,MAAM,EAAEE,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEH,GARD;;AAUA,QAAMI,OAAO,GAAGpD,SAAS,EAAzB;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEoD,OAAO,CAAC/C,SADvB;AAEI,IAAA,KAAK,EAAC,cAFV;AAGI,IAAA,KAAK,EAAEI,WAHX;AAII,IAAA,OAAO,EAAC,UAJZ;AAKI,IAAA,QAAQ,EAAEc,aALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAQI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,eAAe,CAACuC,GAAhB,CAAqBG,UAAD,IAAgB;AACjC,WAAO,oBAAC,QAAD;AACC,MAAA,SAAS,EAAED,OAAO,CAACnD,IADpB;AAEC,MAAA,GAAG,EAAEoD,UAAU,CAACC,QAFjB;AAGC,MAAA,OAAO,EAAE,MAAMrB,OAAO,CAACoB,UAAU,CAACC,QAAZ,CAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAED,UAAU,CAACE,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALL,CAAP;AAOH,GARA,CADL,CARJ,EAmBKV,WAAW,EAnBhB,CADJ;AAwBH;;AAED,eAAevC,iBAAf","sourcesContent":["import React, {useState, useContext} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { List, ListItem, ListItemText, TextField }  from '@material-ui/core/';\n\nimport { PlaceContext } from '../Store/PlaceContext'\n\nimport SearchBoard from './searchBoard';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        maxWidth: 400,\n        backgroundColor: '#f8f8f8',\n        '&:hover': {\n            backgroundColor: '#e3e3e3'\n        }\n    },\n    textField: {\n        width: 400,\n    },\n})\n\n\nfunction PlaceAutoComplete() {\n\n    const { placeState, dispatch } = useContext(PlaceContext)\n    const [searchState, setSearchState] = useState(\"\");\n    const [sugestionsState, setSuggestionState] = useState([]);\n\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n\n    const coordinates = {\n        \"Berlin\": {\n            lat: 52.52,\n            lng: 13.40,\n        },\n        \"Zurich\": {\n            lat: 47.37,\n            lng: 8.54,\n        },\n        \"New+York\": {\n            lat: 40.7128,\n            lng: -74.0060\n        },\n    }\n\n    console.log(\"Hi from placeAutoComplete: \", placeState.location);\n\n    const searchHandler = async (e) => {\n        setSearchState(e.target.value)\n        const locationCoords = `${coordinates[placeState.location].lat},${coordinates[placeState.location].lng}`;\n        console.log(\"Hi from placeAutoComplete: \", locationCoords);\n        const response = await fetch(`/place/autocomplete/json?input=${e.target.value}&types=establishment&location=${locationCoords}&radius=500&key=${googlePlacesApi}`)\n        const data = await response.json();\n        setSuggestionState(data.predictions);\n        console.log(data);\n    }\n\n    const addCard = async (placeId) => {\n\n        const response = await fetch(`/place/details/json?placeid=${placeId}&key=${googlePlacesApi}`)\n        const placeData = await response.json();\n\n        let placeObject = {};\n        placeObject['id'] = placeId\n        placeObject['content'] = placeData.result.name;\n        placeObject['rating'] = placeData.result.rating;\n        placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n        placeObject['location'] = placeData.result.geometry.location;\n        \n        console.log(placeObject);\n        dispatch({type:'ADD_SEARCH_ITEM', payload:{placeObject}})\n        setSearchState(\"\");\n        setSuggestionState([]);\n    }\n\n    const searchBoard = () => {\n        const column = placeState.columns['searched-items'];\n        const places = column.placeIds.map(placeId => \n            placeState.places[placeId]\n        );\n\n        return <SearchBoard key={column.id} column={column} places={places}/>\n        \n    }\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <TextField \n                className={classes.textField}\n                label=\"Place Search\" \n                value={searchState} \n                variant=\"outlined\" \n                onChange={searchHandler}\n            />\n            <List>\n                {sugestionsState.map((suggestion) => {\n                    return <ListItem\n                            className={classes.root}\n                            key={suggestion.place_id} \n                            onClick={() => addCard(suggestion.place_id)}\n                            >\n                                <ListItemText primary={suggestion.description}/>\n                            </ListItem>\n                })}\n            </List>\n            {searchBoard()}\n        </div>\n        \n    );\n}\n\nexport default PlaceAutoComplete;"]},"metadata":{},"sourceType":"module"}