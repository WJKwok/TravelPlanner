{"ast":null,"code":"import initialData from './initial-data';\nexport const placeReducer = (state, action) => {\n  switch (action.type) {\n    case 'CLEAR_STATE':\n      console.log('clearing state...');\n      console.log('cleared state: ', initialData);\n      const clearedState = clearState(); //WHY can't i return initialData?\n      //return initialData\n\n      return clearedState;\n\n    case 'LOAD_EMPTY_DAYS':\n      console.log('before dayboards loaded places length: ', Object.keys(state.places).length);\n      const {\n        numberOfDays,\n        city\n      } = action.payload;\n      const emptyDaysLoaded = loadEmptyDays(state, numberOfDays, city);\n      console.log('dayboards loaded places length: ', Object.keys(emptyDaysLoaded.places).length);\n      return emptyDaysLoaded;\n\n    case 'LOAD_DAY_ITINERARY':\n      const {\n        day,\n        placeIds,\n        dayPlacesFetched\n      } = action.payload;\n      const dayItineraryLoaded = loadItinerary(state, day, placeIds, dayPlacesFetched);\n      return dayItineraryLoaded;\n\n    case 'LOAD_ENTIRE_ITINERARY':\n      const {\n        itinerary,\n        placesFetched\n      } = action.payload;\n      const itineraryLoaded = loadItinerary(state, itinerary, placesFetched);\n      return itineraryLoaded;\n\n    case 'LOAD_CATEGORY':\n      const {\n        extraSuggestions,\n        placeType\n      } = action.payload;\n      const categoryLoaded = loadCategory(state, extraSuggestions, placeType);\n      return categoryLoaded;\n\n    case 'ADD_SEARCH_ITEM':\n      const {\n        placeObject\n      } = action.payload;\n      const addedItem = addItem(state, placeObject);\n      console.log('reducer: ', addedItem);\n      return addedItem;\n\n    case 'ADD_EXTRA_DAY':\n      const extraDay = addExtraDay(state);\n      return extraDay;\n\n    case 'CHANGE_ORDER':\n      const {\n        newOrder\n      } = action.order;\n      return newOrder;\n\n    default:\n      return state;\n  }\n};\n\nconst clearState = () => {\n  const newState = {\n    itineraryId: \"\",\n    places: {},\n    days: 0,\n    location: \"Berlin\",\n    columns: {\n      'searched-items': {\n        id: 'searched-items',\n        title: 'Searched Items',\n        placeIds: []\n      }\n    },\n    categoryBoards: [],\n    dayBoards: [],\n    searchBoard: ['searched-items']\n  };\n  return newState;\n};\n\nconst addItem = (state, placeObject) => {\n  const newState = { ...state,\n    places: { ...state.places,\n      [placeObject.id]: placeObject\n    },\n    columns: { ...state.columns,\n      'searched-items': { ...state.columns['searched-items'],\n        placeIds: [...state.columns['searched-items'].placeIds, placeObject.id]\n      }\n    }\n  };\n  return newState;\n};\n\nconst loadEmptyDays = (state, numberOfDays, city) => {\n  let columns = {};\n  let dayBoards = [];\n\n  for (var i = 0; i < numberOfDays; i++) {\n    let dayObject = {};\n    dayObject['id'] = `day-${i}`;\n    dayObject['title'] = `Day ${i + 1}`;\n    dayObject['placeIds'] = [];\n    columns[`day-${i}`] = dayObject;\n    dayBoards.push(`day-${i}`);\n  }\n\n  const newState = { ...state,\n    days: numberOfDays,\n    location: city,\n    columns: { ...state.columns,\n      ...columns\n    },\n    dayBoards: [...dayBoards]\n  };\n  return newState;\n};\n\nconst loadDayItinerary = (state, day, placeIds, placesFetched) => {\n  let dayColumn = state.columns[`day-${day}`];\n  dayColumn.placeIds = placeIds;\n  const newState = { ...state,\n    places: { ...state.places,\n      ...placesFetched\n    },\n    columns: { ...state.columns,\n      dayColumn\n    }\n  };\n  return newState;\n};\n\nconst loadEntireItinerary = (state, itinerary, placesFetched) => {\n  let columns = {};\n  let dayBoards = [];\n  const dayPlans = itinerary.dayPlans;\n\n  for (var i = 0; i < dayPlans.length; i++) {\n    let dayObject = {};\n    dayObject['id'] = `day-${i}`;\n    dayObject['title'] = `Day ${i + 1}`;\n    dayObject['placeIds'] = [];\n    columns[`day-${i}`] = dayObject;\n    dayBoards.push(`day-${i}`);\n  }\n\n  for (var i = 0; i < dayPlans.length; i++) {\n    const placeIds = dayPlans[i].placeIds;\n    columns[`day-${i}`].placeIds = placeIds;\n  }\n\n  const newState = { ...state,\n    places: placesFetched,\n    columns: { ...state.columns,\n      ...columns\n    }\n  };\n  return newState;\n};\n\nconst loadCategory = (state, extraSuggestions, placeType) => {\n  //console.log('hello from reducer: ', extraSuggestions)\n  let placesFetched = state.places;\n  let columns = {};\n  let categoryBoards = [];\n  let data = extraSuggestions;\n  let placeIds = [];\n  console.log(\"check data result length: \", data.results);\n\n  for (var j = 0; j < data.results.length; j++) {\n    //remove duplicate data from category boards\n    if (data.results[j].place_id in placesFetched) {\n      continue;\n    }\n\n    var placeObject = {};\n    placeObject['id'] = data.results[j].place_id;\n    placeObject['content'] = data.results[j].name;\n    placeObject['rating'] = data.results[j].rating;\n    placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n    placeObject['location'] = data.results[j].geometry.location; //console.log(placeObject);\n\n    placeIds.push(data.results[j].place_id);\n    placesFetched[data.results[j].place_id] = placeObject;\n  }\n\n  columns[`category-${placeType}`] = {\n    id: `category-${placeType}`,\n    title: `${placeType}`,\n    placeIds: placeIds\n  };\n  categoryBoards.push(`category-${placeType}`);\n  const newState = { ...state,\n    places: placesFetched,\n    columns: { ...state.columns,\n      ...columns\n    },\n    categoryBoards: [...state.categoryBoards, ...categoryBoards]\n  };\n  console.log(newState);\n  return newState;\n};\n\nconst addExtraDay = state => {\n  const nextColumnIndex = state.dayBoards.length;\n  const nextColumn = {\n    id: `day-${nextColumnIndex}`,\n    title: `Day ${nextColumnIndex + 1}`,\n    placeIds: []\n  };\n  const newState = { ...state,\n    days: nextColumnIndex + 1,\n    columns: { ...state.columns,\n      [`day-${nextColumnIndex}`]: nextColumn\n    },\n    dayBoards: [...state.dayBoards, `day-${nextColumnIndex}`]\n  };\n  console.log(newState);\n  return newState;\n};","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Store/placeReducer.js"],"names":["initialData","placeReducer","state","action","type","console","log","clearedState","clearState","Object","keys","places","length","numberOfDays","city","payload","emptyDaysLoaded","loadEmptyDays","day","placeIds","dayPlacesFetched","dayItineraryLoaded","loadItinerary","itinerary","placesFetched","itineraryLoaded","extraSuggestions","placeType","categoryLoaded","loadCategory","placeObject","addedItem","addItem","extraDay","addExtraDay","newOrder","order","newState","itineraryId","days","location","columns","id","title","categoryBoards","dayBoards","searchBoard","i","dayObject","push","loadDayItinerary","dayColumn","loadEntireItinerary","dayPlans","data","results","j","place_id","name","rating","photos","photo_reference","geometry","nextColumnIndex","nextColumn"],"mappings":"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","sourcesContent":["import initialData from './initial-data';\n\nexport const placeReducer = (state, action) => {\n    switch (action.type) {\n        case 'CLEAR_STATE':\n            console.log('clearing state...')\n            console.log('cleared state: ', initialData)\n            const clearedState = clearState()\n            //WHY can't i return initialData?\n            //return initialData\n            return clearedState;\n        case 'LOAD_EMPTY_DAYS':\n            console.log('before dayboards loaded places length: ', Object.keys(state.places).length)\n            const { numberOfDays, city } = action.payload\n            const emptyDaysLoaded = loadEmptyDays(state, numberOfDays, city)\n            console.log('dayboards loaded places length: ', Object.keys(emptyDaysLoaded.places).length)\n            return emptyDaysLoaded\n        case 'LOAD_DAY_ITINERARY':\n            const { day, placeIds, dayPlacesFetched } = action.payload\n            const dayItineraryLoaded = loadItinerary(state, day, placeIds, dayPlacesFetched)\n            return dayItineraryLoaded\n        case 'LOAD_ENTIRE_ITINERARY':\n            const { itinerary, placesFetched } = action.payload\n            const itineraryLoaded = loadItinerary(state, itinerary, placesFetched)\n            return itineraryLoaded\n        case 'LOAD_CATEGORY':\n            const { extraSuggestions, placeType} = action.payload\n            const categoryLoaded = loadCategory(state, extraSuggestions, placeType)\n            return categoryLoaded;\n        case 'ADD_SEARCH_ITEM':\n            const { placeObject } = action.payload\n            const addedItem = addItem(state, placeObject)\n            console.log('reducer: ', addedItem);\n            return addedItem;\n        case 'ADD_EXTRA_DAY':\n            const extraDay = addExtraDay(state);\n            return extraDay;\n        case 'CHANGE_ORDER':\n            const { newOrder } = action.order;\n            return newOrder;\n        default:\n            return state;\n    }\n}\n\nconst clearState = () => {\n    const newState = {\n        itineraryId: \"\",\n        places: {},\n        days: 0,\n        location: \"Berlin\",\n        columns: {\n            'searched-items': {\n                id:'searched-items',\n                title: 'Searched Items',\n                placeIds: []\n            }\n        },\n        categoryBoards: [],\n        dayBoards: [],\n        searchBoard: ['searched-items']\n    }\n\n    return newState;\n}\n\nconst addItem = (state, placeObject) => {\n    const newState = {\n        ...state,\n        places: {\n            ...state.places,\n            [placeObject.id]: placeObject\n        },\n        columns: {\n            ...state.columns,\n            'searched-items': {\n                ...state.columns['searched-items'],\n                placeIds: [...state.columns['searched-items'].placeIds, placeObject.id]\n            }\n        }\n    }\n\n    return newState\n}\n\nconst loadEmptyDays = (state, numberOfDays, city) => {\n    let columns = {};\n    let dayBoards = [];\n\n    for (var i = 0; i < numberOfDays; i++) {\n        let dayObject = {};\n        dayObject['id'] = `day-${i}`;\n        dayObject['title'] = `Day ${i + 1}`;\n        dayObject['placeIds'] = [];\n\n        columns[`day-${i}`] = dayObject;\n        dayBoards.push(`day-${i}`);\n    }\n\n    const newState = {\n        ...state,\n        days: numberOfDays,\n        location: city,\n        columns: {\n            ...state.columns,\n            ...columns,\n        },\n        dayBoards: [...dayBoards],\n    }\n\n    return newState\n}\n\nconst loadDayItinerary = (state, day, placeIds, placesFetched) => {\n\n    let dayColumn = state.columns[`day-${day}`];\n    dayColumn.placeIds = placeIds\n\n    const newState = {\n        ...state,\n        places: {\n            ...state.places,\n            ...placesFetched\n        },\n        columns: {\n            ...state.columns,\n            dayColumn,\n        },\n    }\n\n    return newState\n}\n\nconst loadEntireItinerary = (state, itinerary, placesFetched) => {\n\n    let columns = {};\n    let dayBoards = [];\n\n    const dayPlans = itinerary.dayPlans;\n\n    for (var i = 0; i < dayPlans.length; i++) {\n        let dayObject = {};\n        dayObject['id'] = `day-${i}`;\n        dayObject['title'] = `Day ${i + 1}`;\n        dayObject['placeIds'] = [];\n\n        columns[`day-${i}`] = dayObject;\n        dayBoards.push(`day-${i}`);\n    }\n\n    for(var i = 0; i < dayPlans.length; i++) {\n        const placeIds = dayPlans[i].placeIds\n        columns[`day-${i}`].placeIds = placeIds\n    }\n\n    const newState = {\n        ...state,\n        places: placesFetched,\n        columns: {\n            ...state.columns,\n            ...columns,\n        },\n    }\n\n    return newState\n}\n\nconst loadCategory = (state, extraSuggestions, placeType) => {\n\n    //console.log('hello from reducer: ', extraSuggestions)\n    let placesFetched = state.places\n    let columns = {};\n    let categoryBoards = [];    \n\n    let data = extraSuggestions;\n    let placeIds = [];\n\n    console.log(\"check data result length: \", data.results)\n\n    for (var j = 0; j < data.results.length; j++) {\n\n        //remove duplicate data from category boards\n        if(data.results[j].place_id in placesFetched){\n            continue;\n        }\n\n        var placeObject = {};\n        placeObject['id'] = data.results[j].place_id;\n        placeObject['content'] = data.results[j].name;\n        placeObject['rating'] = data.results[j].rating;\n        placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n        placeObject['location'] = data.results[j].geometry.location;\n        \n        //console.log(placeObject);\n        placeIds.push(data.results[j].place_id);\n        placesFetched[data.results[j].place_id] = placeObject;\n    \n    }\n    \n    columns[`category-${placeType}`] = {\n        id: `category-${placeType}`,\n        title: `${placeType}`,\n        placeIds: placeIds\n    }\n\n    categoryBoards.push(`category-${placeType}`);\n\n\n    const newState = {\n        ...state,\n        places: placesFetched,\n        columns: {\n            ...state.columns,\n            ...columns,\n        },\n        categoryBoards: [...state.categoryBoards, ...categoryBoards],\n    }\n\n    console.log(newState)\n    return newState;\n}\n\nconst addExtraDay = (state) => {\n\n    const nextColumnIndex = state.dayBoards.length;\n    const nextColumn = {\n        id: `day-${nextColumnIndex}`, \n        title: `Day ${nextColumnIndex + 1}`, \n        placeIds: []\n    }\n\n    const newState = {\n        ...state,\n        days: nextColumnIndex + 1,\n        columns: {\n            ...state.columns,\n            [`day-${nextColumnIndex}`]: nextColumn\n        },\n        dayBoards: [...state.dayBoards, `day-${nextColumnIndex}`],\n    }\n\n    console.log(newState);\n    return newState\n}\n"]},"metadata":{},"sourceType":"module"}