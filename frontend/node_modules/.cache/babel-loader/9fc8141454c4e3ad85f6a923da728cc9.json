{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/frontend/src/Pages/login.js\";\nimport React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../Store/AuthContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core/';\nconst useStyles = makeStyles({\n  root: {\n    margin: \"auto\",\n    width: \"50%\",\n    paddingTop: 100\n  },\n  textField: {\n    marginBottom: 13\n  },\n  submitButton: {\n    float: \"right\"\n  }\n});\n\nfunction Login() {\n  const {\n    authState,\n    dispatch\n  } = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n  const classes = useStyles();\n  const initialLoginInputState = {\n    username: \"\",\n    password: \"\"\n  };\n  const [loginInput, setLoginInput] = useState(initialLoginInputState);\n  const [loginUser] = useMutation(LOGIN_MUTATION, {\n    update(_, result) {\n      console.log(\"login success: \", result.data.login);\n      dispatch({\n        type: 'LOGIN',\n        payload: result.data.login\n      }); //setLoginInput(initialLoginInputState);\n    },\n\n    onError(err) {\n      console.log(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: loginInput\n  });\n  console.log('authState: ', authState);\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    className: classes.textField,\n    id: \"username\",\n    label: \"Username\",\n    fullWidth: true,\n    value: loginInput.username,\n    onChange: e => setLoginInput({ ...loginInput,\n      [e.target.id]: e.target.value\n    }),\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    className: classes.textField,\n    id: \"password\",\n    fullWidth: true,\n    value: loginInput.password,\n    label: \"Password\",\n    variant: \"outlined\",\n    onChange: e => setLoginInput({ ...loginInput,\n      [e.target.id]: e.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.submitButton,\n    onClick: loginUser,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Login\"));\n}\n\nconst LOGIN_MUTATION = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ){\n        login(\n            username: $username\n            password: $password\n        ){\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\nexport default Login;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/frontend/src/Pages/login.js"],"names":["React","useState","useContext","useMutation","gql","AuthContext","makeStyles","TextField","Button","useStyles","root","margin","width","paddingTop","textField","marginBottom","submitButton","float","Login","authState","dispatch","errors","setErrors","classes","initialLoginInputState","username","password","loginInput","setLoginInput","loginUser","LOGIN_MUTATION","update","_","result","console","log","data","login","type","payload","onError","err","graphQLErrors","extensions","exception","variables","e","target","id","value"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../Store/AuthContext';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {TextField, Button} from '@material-ui/core/';\n\nconst useStyles = makeStyles({\n    root:{\n        margin: \"auto\",\n        width: \"50%\",\n        paddingTop: 100,\n    },\n    textField: {\n        marginBottom: 13,\n    },\n    submitButton: {\n        float: \"right\",\n    },\n})\n\nfunction Login() {\n\n    const { authState, dispatch } = useContext(AuthContext)\n    const [errors, setErrors] = useState({})\n    const classes = useStyles();\n\n    const initialLoginInputState = {\n        username: \"\",\n        password: \"\"\n    }\n    const [loginInput, setLoginInput] = useState(initialLoginInputState)\n\n    const [loginUser] = useMutation(LOGIN_MUTATION, {\n        update(_, result){\n            console.log(\"login success: \", result.data.login);\n            dispatch({ type: 'LOGIN', payload: result.data.login});\n            //setLoginInput(initialLoginInputState);\n        },\n        onError(err){\n            console.log(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: loginInput\n    })\n\n    console.log('authState: ', authState);\n\n    return (\n        <div className={classes.root}>\n            <div>\n                <TextField\n                    className={classes.textField}\n                    id='username'\n                    label=\"Username\"\n                    fullWidth\n                    value={loginInput.username} \n                    onChange={(e) => setLoginInput({...loginInput, [e.target.id]: e.target.value})}\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField \n                    className={classes.textField}\n                    id='password' \n                    fullWidth\n                    value={loginInput.password} \n                    label=\"Password\" \n                    variant=\"outlined\" \n                    onChange={(e) => setLoginInput({...loginInput, [e.target.id]: e.target.value})}\n                />\n            </div>\n            <Button \n                variant=\"outlined\" \n                className={classes.submitButton}\n                onClick={loginUser}\n                size=\"large\"\n            >\n                Login\n            </Button>\n        </div>\n    );\n\n}\n\nconst LOGIN_MUTATION = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ){\n        login(\n            username: $username\n            password: $password\n        ){\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}