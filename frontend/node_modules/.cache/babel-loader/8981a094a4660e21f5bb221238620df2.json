{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/dnd/src/Pages/login.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nfunction Login() {\n  const [errors, setErrors] = useState({});\n  const [loginInput, setLoginInput] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [loginUser] = useMutation(LOGIN_MUTATION, {\n    update(_, result) {\n      console.log(result.data.login);\n    },\n\n    onError(err) {\n      console.log(err.graphQLErrors);\n    },\n\n    variables: loginInput\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Login\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Username\"), React.createElement(\"input\", {\n    id: \"username\",\n    value: loginInput.username,\n    onChange: e => setLoginInput({ ...loginInput,\n      [e.target.id]: e.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    id: \"password\",\n    value: loginInput.password,\n    onChange: e => setLoginInput({ ...loginInput,\n      [e.target.id]: e.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: loginUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Login\"));\n}\n\nconst LOGIN_MUTATION = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ){\n        login(\n            username: $username\n            password: $password\n        ){\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\nexport default Login;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/dnd/src/Pages/login.js"],"names":["React","useState","useMutation","gql","Login","errors","setErrors","loginInput","setLoginInput","username","password","loginUser","LOGIN_MUTATION","update","_","result","console","log","data","login","onError","err","graphQLErrors","variables","e","target","id","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,SAASC,KAAT,GAAiB;AAEb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC;AACzCQ,IAAAA,QAAQ,EAAE,EAD+B;AAEzCC,IAAAA,QAAQ,EAAE;AAF+B,GAAD,CAA5C;AAKA,QAAM,CAACC,SAAD,IAAcT,WAAW,CAACU,cAAD,EAAiB;AAC5CC,IAAAA,MAAM,CAACC,CAAD,EAAIC,MAAJ,EAAW;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAP,CAAYC,KAAxB;AACH,KAH2C;;AAI5CC,IAAAA,OAAO,CAACC,GAAD,EAAK;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,aAAhB;AACH,KAN2C;;AAO5CC,IAAAA,SAAS,EAAEhB;AAPiC,GAAjB,CAA/B;AAUA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,KAAK,EAAEA,UAAU,CAACE,QAAvC;AACA,IAAA,QAAQ,EAAGe,CAAD,IAAOhB,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,OAACiB,CAAC,CAACC,MAAF,CAASC,EAAV,GAAeF,CAAC,CAACC,MAAF,CAASE;AAAxC,KAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,EAMI;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,KAAK,EAAEpB,UAAU,CAACG,QAAvC;AACA,IAAA,QAAQ,EAAGc,CAAD,IAAOhB,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,OAACiB,CAAC,CAACC,MAAF,CAASC,EAAV,GAAeF,CAAC,CAACC,MAAF,CAASE;AAAxC,KAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAQI;AAAQ,IAAA,OAAO,EAAEhB,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aARJ,CADJ;AAaH;;AAED,MAAMC,cAAc,GAAGT,GAAI;;;;;;;;;;;;;;;;CAA3B;AAkBA,eAAeC,KAAf","sourcesContent":["import React, {useState} from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nfunction Login() {\n\n    const [errors, setErrors] = useState({})\n    const [loginInput, setLoginInput] = useState({\n        username: \"\",\n        password: \"\"\n    })\n\n    const [loginUser] = useMutation(LOGIN_MUTATION, {\n        update(_, result){\n            console.log(result.data.login);\n        },\n        onError(err){\n            console.log(err.graphQLErrors);\n        },\n        variables: loginInput\n    })\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <p>Username</p>\n            <input id='username' value={loginInput.username} \n            onChange={(e) => setLoginInput({...loginInput, [e.target.id]: e.target.value})}/>\n            <p>Password</p>\n            <input id='password' value={loginInput.password} \n            onChange={(e) => setLoginInput({...loginInput, [e.target.id]: e.target.value})}/>\n            <button onClick={loginUser}>Login</button>\n        </div>\n    );\n\n}\n\nconst LOGIN_MUTATION = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ){\n        login(\n            username: $username\n            password: $password\n        ){\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}