{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/itineraries.js\";\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../Store/AuthContext';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport { Card, CardMedia, CardContent, Typography, IconButton, makeStyles } from '@material-ui/core';\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 370,\n    maxWidth: 370,\n    margin: 5,\n    display: 'flex'\n  },\n  headerThumbnail: {\n    width: 100\n  },\n  headerTitle: {\n    flex: '1 0 auto'\n  }\n});\n\nfunction Itineraries() {\n  const {\n    authState\n  } = useContext(AuthContext);\n  const {\n    loading,\n    data: {\n      getUserItineraries: itineraries\n    } = {}\n  } = useQuery(GET_USER_ITINERARIES, {\n    variables: {\n      userId: authState.user.id\n    }\n  });\n  console.log(itineraries);\n  let itineraryCards;\n\n  if (itineraries) {\n    itineraryCards = itineraries.map(itinerary => {\n      return React.createElement(Link, {\n        to: `/itinerary/${itinerary.id}`,\n        key: itinerary.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(CardMedia, {\n        className: classes.headerThumbnail,\n        image: \"https://i.imgur.com/zbBglmB.jpg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        className: classes.headerTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, itinerary.city), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, itinerary.dayPlans.length, \" Days\"))), React.createElement(IconButton, {\n        disableRipple: true,\n        disableFocusRipple: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(NavigateNextIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }))));\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Itineraries\"), itineraryCards);\n}\n\nconst GET_USER_ITINERARIES = gql`\n    query getUserItineraries(\n        $userId: ID!\n    ){\n        getUserItineraries(\n            userId: $userId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\n/* with parameters ^, without parameters\nconst GET_USER_ITINERARIES = gql`\n    query {\n        getUserItineraries{\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n*/\n\nexport default Itineraries;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/itineraries.js"],"names":["React","useContext","Link","useQuery","gql","AuthContext","NavigateNextIcon","Card","CardMedia","CardContent","Typography","IconButton","makeStyles","useStyles","root","minWidth","maxWidth","margin","display","headerThumbnail","width","headerTitle","flex","Itineraries","authState","loading","data","getUserItineraries","itineraries","GET_USER_ITINERARIES","variables","userId","user","id","console","log","itineraryCards","map","itinerary","classes","city","dayPlans","length"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../Store/AuthContext';\n\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport {Card, CardMedia, CardContent, Typography, IconButton, makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 370,\n        maxWidth: 370,\n        margin: 5,\n        display: 'flex',\n    },\n    headerThumbnail: {\n        width: 100,\n    },\n    headerTitle: {\n        flex: '1 0 auto',\n    }\n})\n\nfunction Itineraries() {\n\n    const { authState } = useContext(AuthContext);\n\n    const {\n        loading,\n        data: { getUserItineraries : itineraries } = {}\n    } = useQuery(GET_USER_ITINERARIES, {\n        variables: {\n            userId: authState.user.id\n        }\n    });\n\n    console.log(itineraries);\n    let itineraryCards;\n    if (itineraries) {\n        itineraryCards = itineraries.map((itinerary) => {\n        return (\n            <Link to={`/itinerary/${itinerary.id}`} key={itinerary.id}>\n                <Card className={classes.root}>\n                    <CardMedia\n                        className={classes.headerThumbnail}\n                        image=\"https://i.imgur.com/zbBglmB.jpg\"\n                    />\n                    <div>\n                        <CardContent className={classes.headerTitle}>\n                            <Typography>\n                                {itinerary.city}\n                            </Typography>\n                            <Typography>\n                                {itinerary.dayPlans.length} Days\n                            </Typography>\n                        </CardContent>\n                    </div>\n                    <IconButton\n                        disableRipple={true}\n                        disableFocusRipple={true}\n                    >\n                        <NavigateNextIcon />\n                    </IconButton>\n                </Card>\n            </Link>\n        )})\n    }\n    \n    return (\n        <div>\n            <h1>Itineraries</h1>\n            {itineraryCards}\n        </div>\n    );\n}\n\nconst GET_USER_ITINERARIES = gql`\n    query getUserItineraries(\n        $userId: ID!\n    ){\n        getUserItineraries(\n            userId: $userId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\n/* with parameters ^, without parameters\nconst GET_USER_ITINERARIES = gql`\n    query {\n        getUserItineraries{\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n*/\n\nexport default Itineraries;"]},"metadata":{},"sourceType":"module"}