{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/placeAutoComplete.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { List, ListItem, ListItemText } from '@material-ui/core/';\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: '#f44336'\n  }\n});\n\nfunction PlaceAutoComplete() {\n  const [searchState, setSearchState] = useState(\"\");\n  const [sugestionsState, setSuggestionState] = useState([]);\n  const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n  const coordinates = {\n    \"Berlin\": {\n      lat: 52.52,\n      lng: 13.40\n    },\n    \"Zurich\": {\n      lat: 47.3769,\n      lng: 8.5417\n    },\n    \"New+York\": {\n      lat: 40.7128,\n      lng: -74.0060\n    }\n  };\n\n  const searchHandler = async e => {\n    setSearchState(e.target.value);\n    const response = await fetch(`place/autocomplete/json?input=${e.target.value}&types=establishment&location=52.52,13.40&radius=500&key=${googlePlacesApi}`);\n    const data = await response.json();\n    setSuggestionState(data.predictions);\n    console.log(data);\n  };\n\n  const addCard = async placeId => {\n    const response = await fetch(`/place/details/json?placeid=${placeId}&key=${googlePlacesApi}`);\n    const placeData = await response.json();\n    let placeObject = {};\n    placeObject['id'] = placeId;\n    placeObject['content'] = placeData.result.name;\n    placeObject['rating'] = placeData.result.rating;\n    placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n    placeObject['location'] = placeData.result.geometry.location;\n    console.log(placeObject);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: searchState,\n    onChange: searchHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, sugestionsState.map(suggestion => {\n    return React.createElement(ListItem, {\n      key: suggestion.place_id,\n      onClick: () => addCard(suggestion.place_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: suggestion.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  })));\n}\n\nexport default PlaceAutoComplete;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/placeAutoComplete.js"],"names":["React","useState","makeStyles","List","ListItem","ListItemText","useStyles","root","width","maxWidth","backgroundColor","PlaceAutoComplete","searchState","setSearchState","sugestionsState","setSuggestionState","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","coordinates","lat","lng","searchHandler","e","target","value","response","fetch","data","json","predictions","console","log","addCard","placeId","placeData","placeObject","result","name","rating","photos","photo_reference","geometry","location","map","suggestion","place_id","description"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { List, ListItem, ListItemText }  from '@material-ui/core/';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: '#f44336',\n    }\n})\n\n\nfunction PlaceAutoComplete() {\n\n    const [searchState, setSearchState] = useState(\"\");\n    const [sugestionsState, setSuggestionState] = useState([]);\n\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n\n    const coordinates = {\n        \"Berlin\": {\n            lat: 52.52,\n            lng: 13.40,\n        },\n        \"Zurich\": {\n            lat: 47.3769,\n            lng: 8.5417,\n        },\n        \"New+York\": {\n            lat: 40.7128,\n            lng: -74.0060\n        },\n    }\n\n    const searchHandler = async (e) => {\n        setSearchState(e.target.value)\n        const response = await fetch(`place/autocomplete/json?input=${e.target.value}&types=establishment&location=52.52,13.40&radius=500&key=${googlePlacesApi}`)\n        const data = await response.json();\n        setSuggestionState(data.predictions);\n        console.log(data);\n    }\n\n    const addCard = async (placeId) => {\n\n        const response = await fetch(`/place/details/json?placeid=${placeId}&key=${googlePlacesApi}`)\n        const placeData = await response.json();\n\n        let placeObject = {};\n        placeObject['id'] = placeId\n        placeObject['content'] = placeData.result.name;\n        placeObject['rating'] = placeData.result.rating;\n        placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n        placeObject['location'] = placeData.result.geometry.location;\n        \n        console.log(placeObject);\n    }\n\n    return(\n        <div>\n            <input value={searchState} onChange={searchHandler}/>\n            <List>\n                {sugestionsState.map((suggestion) => {\n                    return <ListItem\n                            key={suggestion.place_id} \n                            onClick={() => addCard(suggestion.place_id)}\n                            >\n                                <ListItemText primary={suggestion.description}/>\n                            </ListItem>\n                })}\n            </List>\n            \n        </div>\n        \n    );\n}\n\nexport default PlaceAutoComplete;"]},"metadata":{},"sourceType":"module"}