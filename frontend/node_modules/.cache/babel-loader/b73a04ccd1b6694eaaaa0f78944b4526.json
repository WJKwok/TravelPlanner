{"ast":null,"code":"import initialData from './initial-data';\nexport const placeReducer = (state, action) => {\n  switch (action.type) {\n    case 'SHOW_PLACES':\n      const {\n        compiledData,\n        days,\n        location\n      } = action.search;\n      const placesLoaded = loadPlaces(state, compiledData, days, location);\n      return placesLoaded;\n\n    case 'ADD_EXTRA_DAY':\n      const extraDay = addExtraDay(state);\n      return extraDay;\n\n    case 'CHANGE_ORDER':\n      const {\n        newOrder\n      } = action.order;\n      return newOrder;\n\n    case 'LOAD_ITINERARY':\n      const {\n        itinerary,\n        placesFetched,\n        extraSuggestions\n      } = action.payload;\n      const itineraryLoaded = loadItinerary(state, itinerary, placesFetched, extraSuggestions);\n      return itineraryLoaded;\n\n    case 'CLEAR_STATE':\n      console.log('clearing state...');\n      return initialData;\n\n    case 'ADD_SEARCH_ITEM':\n      const {\n        placeObject\n      } = action.payload;\n      const addedItem = addItem(state, placeObject);\n      console.log('hello from reducer: ', placeObject);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst loadItinerary = (state, itinerary, placesFetched, extraSuggestions) => {\n  console.log('hello from reducer: ', extraSuggestions);\n  let columns = {};\n  let dayBoards = [];\n  let categoryBoards = [];\n  const dayPlans = itinerary.dayPlans;\n\n  for (var i = 0; i < dayPlans.length; i++) {\n    let dayObject = {};\n    dayObject['id'] = `day-${i}`;\n    dayObject['title'] = `Day ${i + 1}`;\n    dayObject['placeIds'] = [];\n    columns[`day-${i}`] = dayObject;\n    dayBoards.push(`day-${i}`);\n  }\n\n  for (var i = 0; i < dayPlans.length; i++) {\n    const placeIds = dayPlans[i].placeIds;\n    columns[`day-${i}`].placeIds = placeIds;\n  }\n\n  const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n\n  for (var c = 0; c < extraSuggestions.length; c++) {\n    let data = extraSuggestions[c];\n    let placeIds = [];\n\n    for (var j = 0; j < data.results.length; j++) {\n      //remove duplicate data from category boards\n      if (data.results[j].place_id in placesFetched) {\n        continue;\n      }\n\n      var placeObject = {};\n      placeObject['id'] = data.results[j].place_id;\n      placeObject['content'] = data.results[j].name;\n      placeObject['rating'] = data.results[j].rating;\n      placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n      placeObject['location'] = data.results[j].geometry.location; //console.log(placeObject);\n\n      placeIds.push(data.results[j].place_id);\n      placesFetched[data.results[j].place_id] = placeObject;\n    }\n\n    columns[`category-${c + 1}`] = {\n      id: `category-${c + 1}`,\n      title: `${placeTypes[c]}`,\n      placeIds: placeIds\n    };\n    categoryBoards.push(`category-${c + 1}`);\n  }\n\n  const newState = { ...state,\n    itineraryId: itinerary.id,\n    days: dayPlans.length,\n    location: itinerary.city,\n    places: placesFetched,\n    columns: { ...state.columns,\n      ...columns\n    },\n    dayBoards: [...dayBoards],\n    categoryBoards: [...categoryBoards]\n  };\n  console.log(newState);\n  return newState;\n};\n\nconst addExtraDay = state => {\n  const nextColumnIndex = state.dayBoards.length;\n  const nextColumn = {\n    id: `day-${nextColumnIndex}`,\n    title: `Day ${nextColumnIndex + 1}`,\n    placeIds: []\n  };\n  const newState = { ...state,\n    days: nextColumnIndex + 1,\n    columns: { ...state.columns,\n      [`day-${nextColumnIndex}`]: nextColumn\n    },\n    dayBoards: [...state.dayBoards, `day-${nextColumnIndex}`]\n  };\n  console.log(newState);\n  return newState;\n};\n\nconst loadPlaces = (state, compiledData, days, location) => {\n  let columns = {};\n  let dayBoards = [];\n  let categoryBoards = [];\n\n  for (var i = 0; i < days; i++) {\n    let dayObject = {};\n    dayObject['id'] = `day-${i}`;\n    dayObject['title'] = `Day ${i + 1}`;\n    dayObject['placeIds'] = [];\n    columns[`day-${i}`] = dayObject;\n    dayBoards.push(`day-${i}`);\n  }\n\n  let placesFetched = {};\n  const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n\n  for (var c = 0; c < compiledData.length; c++) {\n    let data = compiledData[c];\n    let placeIds = [];\n\n    for (var j = 0; j < data.results.length; j++) {\n      //object structure of place card is set here\n      var placeObject = {};\n      placeObject['id'] = data.results[j].place_id;\n      placeObject['content'] = data.results[j].name;\n      placeObject['rating'] = data.results[j].rating;\n      placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n      placeObject['location'] = data.results[j].geometry.location; //console.log(placeObject);\n\n      placeIds.push(data.results[j].place_id);\n      placesFetched[data.results[j].place_id] = placeObject;\n    }\n\n    columns[`category-${c + 1}`] = {\n      id: `category-${c + 1}`,\n      title: `${placeTypes[c]}`,\n      placeIds: placeIds\n    };\n    categoryBoards.push(`category-${c + 1}`);\n  }\n\n  const newState = { ...state,\n    days: days,\n    location: location,\n    places: placesFetched,\n    columns: { ...state.columns,\n      ...columns\n    },\n    dayBoards: [...dayBoards],\n    categoryBoards: [...categoryBoards]\n  }; // console.log(newState);\n\n  return newState;\n};","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Store/placeReducer.js"],"names":["initialData","placeReducer","state","action","type","compiledData","days","location","search","placesLoaded","loadPlaces","extraDay","addExtraDay","newOrder","order","itinerary","placesFetched","extraSuggestions","payload","itineraryLoaded","loadItinerary","console","log","placeObject","addedItem","addItem","columns","dayBoards","categoryBoards","dayPlans","i","length","dayObject","push","placeIds","placeTypes","c","data","j","results","place_id","name","rating","photos","photo_reference","geometry","id","title","newState","itineraryId","city","places","nextColumnIndex","nextColumn"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA,IAAhB;AAAsBC,QAAAA;AAAtB,UAAmCJ,MAAM,CAACK,MAAhD;AACA,YAAMC,YAAY,GAAGC,UAAU,CAACR,KAAD,EAAQG,YAAR,EAAsBC,IAAtB,EAA4BC,QAA5B,CAA/B;AACA,aAAOE,YAAP;;AACJ,SAAK,eAAL;AACI,YAAME,QAAQ,GAAGC,WAAW,CAACV,KAAD,CAA5B;AACA,aAAOS,QAAP;;AACJ,SAAK,cAAL;AACI,YAAM;AAAEE,QAAAA;AAAF,UAAeV,MAAM,CAACW,KAA5B;AACA,aAAOD,QAAP;;AACJ,SAAK,gBAAL;AACI,YAAM;AAAEE,QAAAA,SAAF;AAAaC,QAAAA,aAAb;AAA4BC,QAAAA;AAA5B,UAAgDd,MAAM,CAACe,OAA7D;AACA,YAAMC,eAAe,GAAGC,aAAa,CAAClB,KAAD,EAAQa,SAAR,EAAmBC,aAAnB,EAAkCC,gBAAlC,CAArC;AACA,aAAOE,eAAP;;AACJ,SAAK,aAAL;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAAOtB,WAAP;;AACJ,SAAK,iBAAL;AACI,YAAM;AAAEuB,QAAAA;AAAF,UAAkBpB,MAAM,CAACe,OAA/B;AACA,YAAMM,SAAS,GAAGC,OAAO,CAACvB,KAAD,EAAQqB,WAAR,CAAzB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,WAApC;AACA,aAAOrB,KAAP;;AACJ;AACI,aAAOA,KAAP;AAxBR;AA0BH,CA3BM;;AA6BP,MAAMkB,aAAa,GAAG,CAAClB,KAAD,EAAQa,SAAR,EAAmBC,aAAnB,EAAkCC,gBAAlC,KAAuD;AAEzEI,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCL,gBAApC;AAEA,MAAIS,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,cAAc,GAAG,EAArB;AAEA,QAAMC,QAAQ,GAAGd,SAAS,CAACc,QAA3B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAIE,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAAC,IAAD,CAAT,GAAmB,OAAMF,CAAE,EAA3B;AACAE,IAAAA,SAAS,CAAC,OAAD,CAAT,GAAsB,OAAMF,CAAC,GAAG,CAAE,EAAlC;AACAE,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,EAAxB;AAEAN,IAAAA,OAAO,CAAE,OAAMI,CAAE,EAAV,CAAP,GAAsBE,SAAtB;AACAL,IAAAA,SAAS,CAACM,IAAV,CAAgB,OAAMH,CAAE,EAAxB;AACH;;AAGD,OAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,QAAQ,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAMI,QAAQ,GAAGL,QAAQ,CAACC,CAAD,CAAR,CAAYI,QAA7B;AACAR,IAAAA,OAAO,CAAE,OAAMI,CAAE,EAAV,CAAP,CAAoBI,QAApB,GAA+BA,QAA/B;AACH;;AAED,QAAMC,UAAU,GAAG,CAAC,aAAD,EAAgB,QAAhB,EAA0B,oBAA1B,CAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,gBAAgB,CAACc,MAArC,EAA6CK,CAAC,EAA9C,EAAiD;AAE7C,QAAIC,IAAI,GAAGpB,gBAAgB,CAACmB,CAAD,CAA3B;AACA,QAAIF,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,OAAL,CAAaR,MAAjC,EAAyCO,CAAC,EAA1C,EAA8C;AAE1C;AACA,UAAGD,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAAhB,IAA4BxB,aAA/B,EAA6C;AACzC;AACH;;AAED,UAAIO,WAAW,GAAG,EAAlB;AACAA,MAAAA,WAAW,CAAC,IAAD,CAAX,GAAoBc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAApC;AACAjB,MAAAA,WAAW,CAAC,SAAD,CAAX,GAAyBc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBG,IAAzC;AACAlB,MAAAA,WAAW,CAAC,QAAD,CAAX,GAAwBc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBI,MAAxC;AACAnB,MAAAA,WAAW,CAAC,UAAD,CAAX,GAA0Bc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBK,MAAhB,GAAyBN,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBK,MAAhB,CAAuB,CAAvB,EAA0BC,eAAnD,GAAqE,GAA/F;AACArB,MAAAA,WAAW,CAAC,UAAD,CAAX,GAA0Bc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBO,QAAhB,CAAyBtC,QAAnD,CAZ0C,CAc1C;;AACA2B,MAAAA,QAAQ,CAACD,IAAT,CAAcI,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAA9B;AACAxB,MAAAA,aAAa,CAACqB,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAAjB,CAAb,GAA0CjB,WAA1C;AAEH;;AAEDG,IAAAA,OAAO,CAAE,YAAWU,CAAC,GAAC,CAAE,EAAjB,CAAP,GAA6B;AACzBU,MAAAA,EAAE,EAAG,YAAWV,CAAC,GAAC,CAAE,EADK;AAEzBW,MAAAA,KAAK,EAAG,GAAEZ,UAAU,CAACC,CAAD,CAAI,EAFC;AAGzBF,MAAAA,QAAQ,EAAEA;AAHe,KAA7B;AAMAN,IAAAA,cAAc,CAACK,IAAf,CAAqB,YAAWG,CAAC,GAAC,CAAE,EAApC;AAEH;;AAED,QAAMY,QAAQ,GAAG,EACb,GAAG9C,KADU;AAEb+C,IAAAA,WAAW,EAAElC,SAAS,CAAC+B,EAFV;AAGbxC,IAAAA,IAAI,EAAEuB,QAAQ,CAACE,MAHF;AAIbxB,IAAAA,QAAQ,EAAEQ,SAAS,CAACmC,IAJP;AAKbC,IAAAA,MAAM,EAAEnC,aALK;AAMbU,IAAAA,OAAO,EAAE,EACL,GAAGxB,KAAK,CAACwB,OADJ;AAEL,SAAGA;AAFE,KANI;AAUbC,IAAAA,SAAS,EAAE,CAAC,GAAGA,SAAJ,CAVE;AAWbC,IAAAA,cAAc,EAAE,CAAC,GAAGA,cAAJ;AAXH,GAAjB;AAcAP,EAAAA,OAAO,CAACC,GAAR,CAAY0B,QAAZ;AACA,SAAOA,QAAP;AACH,CA/ED;;AAiFA,MAAMpC,WAAW,GAAIV,KAAD,IAAW;AAE3B,QAAMkD,eAAe,GAAGlD,KAAK,CAACyB,SAAN,CAAgBI,MAAxC;AACA,QAAMsB,UAAU,GAAG;AACfP,IAAAA,EAAE,EAAG,OAAMM,eAAgB,EADZ;AAEfL,IAAAA,KAAK,EAAG,OAAMK,eAAe,GAAG,CAAE,EAFnB;AAGflB,IAAAA,QAAQ,EAAE;AAHK,GAAnB;AAMA,QAAMc,QAAQ,GAAG,EACb,GAAG9C,KADU;AAEbI,IAAAA,IAAI,EAAE8C,eAAe,GAAG,CAFX;AAGb1B,IAAAA,OAAO,EAAE,EACL,GAAGxB,KAAK,CAACwB,OADJ;AAEL,OAAE,OAAM0B,eAAgB,EAAxB,GAA4BC;AAFvB,KAHI;AAOb1B,IAAAA,SAAS,EAAE,CAAC,GAAGzB,KAAK,CAACyB,SAAV,EAAsB,OAAMyB,eAAgB,EAA5C;AAPE,GAAjB;AAUA/B,EAAAA,OAAO,CAACC,GAAR,CAAY0B,QAAZ;AACA,SAAOA,QAAP;AACH,CArBD;;AAuBA,MAAMtC,UAAU,GAAG,CAACR,KAAD,EAAQG,YAAR,EAAsBC,IAAtB,EAA4BC,QAA5B,KAAyC;AAExD,MAAImB,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,cAAc,GAAG,EAArB;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,IAApB,EAA0BwB,CAAC,EAA3B,EAA+B;AAC3B,QAAIE,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAAC,IAAD,CAAT,GAAmB,OAAMF,CAAE,EAA3B;AACAE,IAAAA,SAAS,CAAC,OAAD,CAAT,GAAsB,OAAMF,CAAC,GAAG,CAAE,EAAlC;AACAE,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,EAAxB;AAEAN,IAAAA,OAAO,CAAE,OAAMI,CAAE,EAAV,CAAP,GAAsBE,SAAtB;AACAL,IAAAA,SAAS,CAACM,IAAV,CAAgB,OAAMH,CAAE,EAAxB;AACH;;AAED,MAAId,aAAa,GAAG,EAApB;AACA,QAAMmB,UAAU,GAAG,CAAC,aAAD,EAAgB,QAAhB,EAA0B,oBAA1B,CAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,YAAY,CAAC0B,MAAjC,EAAyCK,CAAC,EAA1C,EAA6C;AAEzC,QAAIC,IAAI,GAAGhC,YAAY,CAAC+B,CAAD,CAAvB;AACA,QAAIF,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,OAAL,CAAaR,MAAjC,EAAyCO,CAAC,EAA1C,EAA8C;AAE1C;AAEA,UAAIf,WAAW,GAAG,EAAlB;AACAA,MAAAA,WAAW,CAAC,IAAD,CAAX,GAAoBc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAApC;AACAjB,MAAAA,WAAW,CAAC,SAAD,CAAX,GAAyBc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBG,IAAzC;AACAlB,MAAAA,WAAW,CAAC,QAAD,CAAX,GAAwBc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBI,MAAxC;AACAnB,MAAAA,WAAW,CAAC,UAAD,CAAX,GAA0Bc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBK,MAAhB,GAAyBN,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBK,MAAhB,CAAuB,CAAvB,EAA0BC,eAAnD,GAAqE,GAA/F;AACArB,MAAAA,WAAW,CAAC,UAAD,CAAX,GAA0Bc,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBO,QAAhB,CAAyBtC,QAAnD,CAT0C,CAW1C;;AACA2B,MAAAA,QAAQ,CAACD,IAAT,CAAcI,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAA9B;AACAxB,MAAAA,aAAa,CAACqB,IAAI,CAACE,OAAL,CAAaD,CAAb,EAAgBE,QAAjB,CAAb,GAA0CjB,WAA1C;AAEH;;AAEDG,IAAAA,OAAO,CAAE,YAAWU,CAAC,GAAC,CAAE,EAAjB,CAAP,GAA6B;AACzBU,MAAAA,EAAE,EAAG,YAAWV,CAAC,GAAC,CAAE,EADK;AAEzBW,MAAAA,KAAK,EAAG,GAAEZ,UAAU,CAACC,CAAD,CAAI,EAFC;AAGzBF,MAAAA,QAAQ,EAAEA;AAHe,KAA7B;AAMAN,IAAAA,cAAc,CAACK,IAAf,CAAqB,YAAWG,CAAC,GAAC,CAAE,EAApC;AAEH;;AAED,QAAMY,QAAQ,GAAG,EACb,GAAG9C,KADU;AAEbI,IAAAA,IAAI,EAAEA,IAFO;AAGbC,IAAAA,QAAQ,EAAEA,QAHG;AAIb4C,IAAAA,MAAM,EAAEnC,aAJK;AAKbU,IAAAA,OAAO,EAAE,EACL,GAAGxB,KAAK,CAACwB,OADJ;AAEL,SAAGA;AAFE,KALI;AASbC,IAAAA,SAAS,EAAE,CAAC,GAAGA,SAAJ,CATE;AAUbC,IAAAA,cAAc,EAAE,CAAC,GAAGA,cAAJ;AAVH,GAAjB,CAnDwD,CAgExD;;AACA,SAAOoB,QAAP;AACH,CAlED","sourcesContent":["import initialData from './initial-data';\n\nexport const placeReducer = (state, action) => {\n    switch (action.type) {\n        case 'SHOW_PLACES':\n            const { compiledData, days, location } = action.search;\n            const placesLoaded = loadPlaces(state, compiledData, days, location);\n            return placesLoaded;\n        case 'ADD_EXTRA_DAY':\n            const extraDay = addExtraDay(state);\n            return extraDay;\n        case 'CHANGE_ORDER':\n            const { newOrder } = action.order;\n            return newOrder;\n        case 'LOAD_ITINERARY':\n            const { itinerary, placesFetched, extraSuggestions} = action.payload\n            const itineraryLoaded = loadItinerary(state, itinerary, placesFetched, extraSuggestions)\n            return itineraryLoaded;\n        case 'CLEAR_STATE':\n            console.log('clearing state...')\n            return initialData;\n        case 'ADD_SEARCH_ITEM':\n            const { placeObject } = action.payload\n            const addedItem = addItem(state, placeObject)\n            console.log('hello from reducer: ', placeObject)\n            return state;\n        default:\n            return state;\n    }\n}\n\nconst loadItinerary = (state, itinerary, placesFetched, extraSuggestions) => {\n\n    console.log('hello from reducer: ', extraSuggestions)\n\n    let columns = {};\n    let dayBoards = [];\n    let categoryBoards = [];\n\n    const dayPlans = itinerary.dayPlans;\n\n    for (var i = 0; i < dayPlans.length; i++) {\n        let dayObject = {};\n        dayObject['id'] = `day-${i}`;\n        dayObject['title'] = `Day ${i + 1}`;\n        dayObject['placeIds'] = [];\n\n        columns[`day-${i}`] = dayObject;\n        dayBoards.push(`day-${i}`);\n    }\n\n\n    for(var i = 0; i < dayPlans.length; i++) {\n        const placeIds = dayPlans[i].placeIds\n        columns[`day-${i}`].placeIds = placeIds\n    }\n\n    const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n    \n    for (var c = 0; c < extraSuggestions.length; c++){\n\n        let data = extraSuggestions[c];\n        let placeIds = [];\n\n        for (var j = 0; j < data.results.length; j++) {\n\n            //remove duplicate data from category boards\n            if(data.results[j].place_id in placesFetched){\n                continue;\n            }\n    \n            var placeObject = {};\n            placeObject['id'] = data.results[j].place_id;\n            placeObject['content'] = data.results[j].name;\n            placeObject['rating'] = data.results[j].rating;\n            placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n            placeObject['location'] = data.results[j].geometry.location;\n            \n            //console.log(placeObject);\n            placeIds.push(data.results[j].place_id);\n            placesFetched[data.results[j].place_id] = placeObject;\n        \n        }\n    \n        columns[`category-${c+1}`] = {\n            id: `category-${c+1}`,\n            title: `${placeTypes[c]}`,\n            placeIds: placeIds\n        }\n\n        categoryBoards.push(`category-${c+1}`);\n\n    } \n\n    const newState = {\n        ...state,\n        itineraryId: itinerary.id,\n        days: dayPlans.length,\n        location: itinerary.city,\n        places: placesFetched,\n        columns: {\n            ...state.columns,\n            ...columns,\n        },\n        dayBoards: [...dayBoards],\n        categoryBoards: [...categoryBoards],\n    }\n\n    console.log(newState)\n    return newState;\n}\n\nconst addExtraDay = (state) => {\n\n    const nextColumnIndex = state.dayBoards.length;\n    const nextColumn = {\n        id: `day-${nextColumnIndex}`, \n        title: `Day ${nextColumnIndex + 1}`, \n        placeIds: []\n    }\n\n    const newState = {\n        ...state,\n        days: nextColumnIndex + 1,\n        columns: {\n            ...state.columns,\n            [`day-${nextColumnIndex}`]: nextColumn\n        },\n        dayBoards: [...state.dayBoards, `day-${nextColumnIndex}`],\n    }\n\n    console.log(newState);\n    return newState\n}\n\nconst loadPlaces = (state, compiledData, days, location) => {\n\n    let columns = {};\n    let dayBoards = [];\n    let categoryBoards = [];\n\n    for (var i = 0; i < days; i++) {\n        let dayObject = {};\n        dayObject['id'] = `day-${i}`;\n        dayObject['title'] = `Day ${i + 1}`;\n        dayObject['placeIds'] = [];\n\n        columns[`day-${i}`] = dayObject;\n        dayBoards.push(`day-${i}`);\n    }\n\n    let placesFetched = {};\n    const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n    \n    for (var c = 0; c < compiledData.length; c++){\n\n        let data = compiledData[c];\n        let placeIds = [];\n\n        for (var j = 0; j < data.results.length; j++) {\n\n            //object structure of place card is set here\n    \n            var placeObject = {};\n            placeObject['id'] = data.results[j].place_id;\n            placeObject['content'] = data.results[j].name;\n            placeObject['rating'] = data.results[j].rating;\n            placeObject['photoRef'] = data.results[j].photos ? data.results[j].photos[0].photo_reference : \"0\";\n            placeObject['location'] = data.results[j].geometry.location;\n            \n            //console.log(placeObject);\n            placeIds.push(data.results[j].place_id);\n            placesFetched[data.results[j].place_id] = placeObject;\n        \n        }\n    \n        columns[`category-${c+1}`] = {\n            id: `category-${c+1}`,\n            title: `${placeTypes[c]}`,\n            placeIds: placeIds\n        }\n\n        categoryBoards.push(`category-${c+1}`);\n\n    } \n    \n    const newState = {\n        ...state,\n        days: days,\n        location: location,\n        places: placesFetched,\n        columns: {\n            ...state.columns,\n            ...columns,\n        },\n        dayBoards: [...dayBoards],\n        categoryBoards: [...categoryBoards],\n    }\n\n    // console.log(newState);\n    return newState;\n}"]},"metadata":{},"sourceType":"module"}