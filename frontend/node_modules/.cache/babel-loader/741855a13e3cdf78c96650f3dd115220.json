{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/page.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport DayBoard from './dayBoard';\nimport CategoryBoard from './categoryBoard';\nimport Form from './form';\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Page(props) {\n  const {\n    placeState,\n    dispatch\n  } = useContext(PlaceContext);\n  let itineraryId;\n\n  if (props.match.params.itineraryId) {\n    itineraryId = props.match.params.itineraryId;\n  }\n\n  ;\n  console.log(itineraryId);\n  const {\n    data\n  } = useQuery(GET_ITINERARY, {\n    variables: {\n      itineraryId\n    }\n  });\n  useEffect(() => {\n    async function fetchItineraryFromGoogle() {\n      const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n      const dayPlans = data.getItinerary.dayPlans;\n      const city = data.getItinerary.city;\n      let placesFetched = {};\n\n      for (var i = 0; i < dayPlans.length; i++) {\n        const placeIds = dayPlans[i].placeIds; //columns[`day-${i}`].placeIds = placeIds\n        //moved to within reducer\n\n        for (var j = 0; j < placeIds.length; j++) {\n          const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`);\n          const placeData = await response.json();\n          let placeObject = {};\n          placeObject['id'] = placeIds[j];\n          placeObject['content'] = placeData.result.name;\n          placeObject['rating'] = placeData.result.rating;\n          placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n          placeObject['location'] = placeData.result.geometry.location;\n          console.log(placeObject);\n          placesFetched[placeIds[j]] = placeObject;\n        }\n      }\n\n      const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n      let extraSuggestions = [];\n\n      for (var i = 0; i < placeTypes.length; i++) {\n        const response = await fetch(`/place/textsearch/json?query=best+${placeTypes[i]}+${city}&key=${googlePlacesApi}`);\n        const data = await response.json();\n        extraSuggestions.push(data);\n      }\n\n      dispatch({\n        type: \"LOAD_ITINERARY\",\n        payload: {\n          itinerary: data.getItinerary,\n          placesFetched,\n          extraSuggestions\n        }\n      });\n    }\n\n    if (data) {\n      fetchItineraryFromGoogle();\n    }\n  }, [data]);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = placeState.columns[source.droppableId];\n    const finish = placeState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = placeState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...placeState,\n        columns: { ...placeState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      console.log(newOrder);\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...placeState,\n      columns: { ...placeState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    console.log(newOrder);\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  let itinerary = [];\n  const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n  const [submitItinerary] = useMutation(mutation, {\n    // result is the second parameter!\n    update(_, result) {\n      console.log(result.data);\n\n      if (!itineraryId) {\n        console.log('no itinerary id');\n        itineraryId = result.data.submitItinerary.id;\n        console.log(\"suppoed to changed:\", itineraryId);\n      }\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: {\n      dayPlans: itinerary,\n      city: placeState.location,\n      id: itineraryId\n    }\n  });\n\n  const addExtraDay = () => {\n    dispatch({\n      type: 'ADD_EXTRA_DAY'\n    });\n  };\n\n  const saveItinerary = () => {\n    const days = placeState.dayBoards;\n\n    for (var i = 0; i < days.length; i++) {\n      itinerary.push({\n        placeIds: placeState.columns[days[i]].placeIds\n      });\n    }\n\n    console.log(itinerary);\n    submitItinerary();\n  };\n\n  console.log(placeState);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"day-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, placeState.dayBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(DayBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    });\n  }), placeState.dayBoards.length > 0 ? React.createElement(\"button\", {\n    className: \"extra-day\",\n    onClick: addExtraDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"+\") : \"\"), React.createElement(\"button\", {\n    onClick: saveItinerary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Save Itinerary\"), React.createElement(\"div\", {\n    className: \"place-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, placeState.categoryBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(CategoryBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    });\n  }))));\n}\n\nconst SUBMIT_ITINERARY = gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`;\nexport default Page;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/page.js"],"names":["React","useContext","useEffect","DragDropContext","useQuery","useMutation","gql","DayBoard","CategoryBoard","Form","PlaceContext","Page","props","placeState","dispatch","itineraryId","match","params","console","log","data","GET_ITINERARY","variables","fetchItineraryFromGoogle","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","dayPlans","getItinerary","city","placesFetched","i","length","placeIds","j","response","fetch","placeData","json","placeObject","result","name","rating","photos","photo_reference","geometry","location","placeTypes","extraSuggestions","push","type","payload","itinerary","onDragEnd","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","splice","newColumn","newOrder","id","order","startplaceIds","newStart","finishplaceIds","newFinish","mutation","SAVE_ITINERARY","SUBMIT_ITINERARY","submitItinerary","update","_","onError","err","addExtraDay","saveItinerary","days","dayBoards","map","columnId","places","placeId","categoryBoards"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport DayBoard from './dayBoard';\nimport CategoryBoard from './categoryBoard';\nimport Form from './form';\n\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Page(props) {\n\n    const { placeState, dispatch } = useContext(PlaceContext);\n\n    let itineraryId;\n    if (props.match.params.itineraryId) {\n        itineraryId = props.match.params.itineraryId\n    };\n\n    console.log(itineraryId);\n\n    const { data } = useQuery(GET_ITINERARY, {\n        variables: {itineraryId}\n    })\n    useEffect(() => {\n\n        async function fetchItineraryFromGoogle() {\n\n            const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n            const dayPlans = data.getItinerary.dayPlans;\n            const city = data.getItinerary.city;\n            let placesFetched = {};\n            \n            for(var i = 0; i < dayPlans.length; i++) {\n                const placeIds = dayPlans[i].placeIds\n                //columns[`day-${i}`].placeIds = placeIds\n                //moved to within reducer\n                for(var j = 0; j < placeIds.length; j++){\n                    const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`)\n                    const placeData = await response.json();\n\n                    let placeObject = {};\n                    placeObject['id'] = placeIds[j]\n                    placeObject['content'] = placeData.result.name;\n                    placeObject['rating'] = placeData.result.rating;\n                    placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n                    placeObject['location'] = placeData.result.geometry.location;\n                    \n                    console.log(placeObject);\n                    placesFetched[placeIds[j]] = placeObject;\n                }\n            }\n\n            const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n            let extraSuggestions = [];\n\n            for (var i = 0; i < placeTypes.length; i++){\n                const response = await fetch(`/place/textsearch/json?query=best+${placeTypes[i]}+${city}&key=${googlePlacesApi}`)\n                const data = await response.json();\n                extraSuggestions.push(data);\n            }\n\n            dispatch({ type:\"LOAD_ITINERARY\", payload:{itinerary: data.getItinerary, placesFetched, extraSuggestions}})\n        }\n\n        if(data){\n            fetchItineraryFromGoogle();\n        }\n    }, [data])\n\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = placeState.columns[source.droppableId];\n        const finish = placeState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = placeState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...placeState,\n                columns: {\n                    ...placeState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n            console.log(newOrder);\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...placeState,\n            columns: {\n                ...placeState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        console.log(newOrder);\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    let itinerary = [];\n    const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n    const [submitItinerary] = useMutation(mutation, {\n        // result is the second parameter!\n        update(_, result){\n            console.log(result.data);\n            if (!itineraryId){\n                console.log('no itinerary id')\n                itineraryId = result.data.submitItinerary.id\n                console.log(\"suppoed to changed:\", itineraryId);\n            }\n        },\n        onError(err){\n            console.log(err)\n        },\n        variables: {\n            dayPlans: itinerary,\n            city: placeState.location,\n            id: itineraryId\n        }\n    })\n\n    const addExtraDay = () => {\n        dispatch({type:'ADD_EXTRA_DAY'});\n    }\n\n    const saveItinerary = () => {\n        const days = placeState.dayBoards;\n        for (var i = 0; i < days.length; i ++){\n            itinerary.push({\n                placeIds: placeState.columns[days[i]].placeIds\n            });\n            \n        }\n        console.log(itinerary);\n        submitItinerary();\n    }\n\n    console.log(placeState);\n\n    return (\n        <div>\n            <Form/>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='day-boards-container'>\n                    {placeState.dayBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n\n                        return <DayBoard key={column.id} column={column} places={places}/>\n                    })}\n                    {placeState.dayBoards.length > 0 ? <button className=\"extra-day\" onClick={addExtraDay}>+</button> : \"\"}\n                    \n                </div>\n                <button onClick={saveItinerary}>Save Itinerary</button>\n                <div className='place-boards-container'>\n                    {placeState.categoryBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n\n                        return <CategoryBoard key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n\n}\n\nconst SUBMIT_ITINERARY =  gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`\n\nexport default Page;"]},"metadata":{},"sourceType":"module"}