{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/page.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport DayBoard from './dayBoard';\nimport CategoryBoard from './categoryBoard';\nimport Form from './form';\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Page(props) {\n  const {\n    placeState,\n    dispatch\n  } = useContext(PlaceContext);\n  const itineraryId = props.match.params.itineraryId;\n  const {\n    data\n  } = useQuery(GET_ITINERARY, {\n    variables: {\n      itineraryId\n    }\n  });\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: \"LOAD_ITINERARY\",\n        payload: {\n          itinerary: data.getItinerary\n        }\n      });\n    }\n  }, [data]);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = placeState.columns[source.droppableId];\n    const finish = placeState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = placeState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...placeState,\n        columns: { ...placeState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      console.log(newOrder);\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...placeState,\n      columns: { ...placeState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    console.log(newOrder);\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  let itinerary = [];\n  const [submitItinerary] = useMutation(SUBMIT_ITINERARY, {\n    // result is the second parameter!\n    update(_, result) {\n      console.log(result.data);\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: {\n      dayPlans: itinerary,\n      city: placeState.location\n    }\n  });\n\n  const addExtraDay = () => {\n    dispatch({\n      type: 'ADD_EXTRA_DAY'\n    });\n  };\n\n  const saveItinerary = () => {\n    const days = placeState.dayBoards;\n\n    for (var i = 0; i < days.length; i++) {\n      itinerary.push({\n        placeIds: placeState.columns[days[i]].placeIds\n      });\n    }\n\n    console.log(itinerary);\n    submitItinerary();\n  };\n\n  console.log(placeState);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"day-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, placeState.dayBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(DayBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    });\n  }), placeState.dayBoards.length > 0 ? React.createElement(\"button\", {\n    className: \"extra-day\",\n    onClick: addExtraDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"+\") : \"\"), React.createElement(\"button\", {\n    onClick: saveItinerary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Save Itinerary\"), React.createElement(\"div\", {\n    className: \"place-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, placeState.categoryBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(CategoryBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    });\n  }))));\n}\n\nconst SUBMIT_ITINERARY = gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`;\nexport default Page;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/page.js"],"names":["React","useContext","useEffect","DragDropContext","useQuery","useMutation","gql","DayBoard","CategoryBoard","Form","PlaceContext","Page","props","placeState","dispatch","itineraryId","match","params","data","GET_ITINERARY","variables","type","payload","itinerary","getItinerary","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","placeIds","splice","newColumn","newOrder","id","console","log","order","startplaceIds","newStart","finishplaceIds","newFinish","submitItinerary","SUBMIT_ITINERARY","update","_","onError","err","dayPlans","city","location","addExtraDay","saveItinerary","days","dayBoards","i","length","push","map","columnId","places","placeId","categoryBoards"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport DayBoard from './dayBoard';\nimport CategoryBoard from './categoryBoard';\nimport Form from './form';\n\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Page(props) {\n\n    const { placeState, dispatch } = useContext(PlaceContext);\n\n    const itineraryId = props.match.params.itineraryId;\n    const { data } = useQuery(GET_ITINERARY, {\n        variables: {itineraryId}\n    })\n    useEffect(() => {\n        if(data){\n            dispatch({ type:\"LOAD_ITINERARY\", payload:{itinerary: data.getItinerary}})\n        }\n    }, [data])\n\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = placeState.columns[source.droppableId];\n        const finish = placeState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = placeState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...placeState,\n                columns: {\n                    ...placeState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n            console.log(newOrder);\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...placeState,\n            columns: {\n                ...placeState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        console.log(newOrder);\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    let itinerary = [];\n\n    const [submitItinerary] = useMutation(SUBMIT_ITINERARY, {\n        // result is the second parameter!\n        update(_, result){\n            console.log(result.data);\n        },\n        onError(err){\n            console.log(err)\n        },\n        variables: {\n            dayPlans: itinerary,\n            city: placeState.location\n        }\n    })\n\n    const addExtraDay = () => {\n        dispatch({type:'ADD_EXTRA_DAY'});\n    }\n\n    const saveItinerary = () => {\n        const days = placeState.dayBoards;\n        for (var i = 0; i < days.length; i ++){\n            itinerary.push({\n                placeIds: placeState.columns[days[i]].placeIds\n            });\n            \n        }\n        console.log(itinerary);\n        submitItinerary();\n    }\n\n    console.log(placeState);\n\n    return (\n        <div>\n            <Form/>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='day-boards-container'>\n                    {placeState.dayBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n\n                        return <DayBoard key={column.id} column={column} places={places}/>\n                    })}\n                    {placeState.dayBoards.length > 0 ? <button className=\"extra-day\" onClick={addExtraDay}>+</button> : \"\"}\n                    \n                </div>\n                <button onClick={saveItinerary}>Save Itinerary</button>\n                <div className='place-boards-container'>\n                    {placeState.categoryBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n\n                        return <CategoryBoard key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n\n}\n\nconst SUBMIT_ITINERARY =  gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`\n\nexport default Page;"]},"metadata":{},"sourceType":"module"}