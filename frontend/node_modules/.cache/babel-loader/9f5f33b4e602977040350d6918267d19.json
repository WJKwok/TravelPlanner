{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/register.js\";\nimport React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../Store/AuthContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core';\nconst useStyles = makeStyles({\n  root: {\n    margin: \"auto\",\n    width: \"50%\",\n    paddingTop: 100\n  },\n  textField: {\n    marginBottom: 5\n  },\n  submitButton: {\n    float: \"right\"\n  }\n});\n\nfunction Register() {\n  const {\n    dispatch\n  } = useContext(AuthContext);\n  const classes = useStyles();\n  const initialRegisterInput = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  const [registerInput, setRegisterInput] = useState(initialRegisterInput);\n  const [registerUser] = useMutation(REGISTER_USER, {\n    update(_, result) {\n      console.log(result.data.register);\n      dispatch({\n        type: \"LOGIN\",\n        payload: result.data.register\n      });\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: registerInput\n  });\n\n  const inputChangeHandler = e => {\n    setRegisterInput({ ...registerInput,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    fullWidth: true,\n    className: classes.textField,\n    id: \"username\",\n    value: registerInput.username,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    fullWidth: true,\n    className: classes.textField,\n    id: \"email\",\n    value: registerInput.email,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    fullWidth: true,\n    className: classes.textField,\n    id: \"password\",\n    value: registerInput.password,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    fullWidth: true,\n    className: classes.textField,\n    id: \"confirmPassword\",\n    value: registerInput.confirmPassword,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: classes.submitButton,\n    onClick: registerUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"input\", {\n    id: \"password\",\n    value: registerInput.password,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"confirm password\"), React.createElement(\"input\", {\n    id: \"confirmPassword\",\n    value: registerInput.confirmPassword,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: registerUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Register\")); // return (\n  //     <div>\n  //         <h1>Register</h1>\n  //         <p>username</p>\n  //         <input id='username' value={registerInput.username} onChange={inputChangeHandler}/>\n  //         <p>email</p>\n  //         <input id='email' value={registerInput.email} onChange={inputChangeHandler}/>\n  //         <p>password</p>\n  //         <input id='password' value={registerInput.password} onChange={inputChangeHandler}/>\n  //         <p>confirm password</p>\n  //         <input id='confirmPassword' value={registerInput.confirmPassword} onChange={inputChangeHandler}/>\n  //         <button onClick={registerUser}>Register</button>\n  //     </div>\n  // );\n}\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ){\n        register(\n            registerInput:{\n            username: $username\n            email: $email\n            password: $password\n            confirmPassword: $confirmPassword\n            }\n        ){\n            id\n            email\n            token\n            username\n            createdAt\n        }\n    }\n`;\nexport default Register;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/register.js"],"names":["React","useState","useContext","useMutation","gql","AuthContext","makeStyles","TextField","Button","useStyles","root","margin","width","paddingTop","textField","marginBottom","submitButton","float","Register","dispatch","classes","initialRegisterInput","username","email","password","confirmPassword","registerInput","setRegisterInput","registerUser","REGISTER_USER","update","_","result","console","log","data","register","type","payload","onError","err","variables","inputChangeHandler","e","target","id","value"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { AuthContext } from '../Store/AuthContext'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        margin: \"auto\",\n        width: \"50%\",\n        paddingTop: 100,\n    },\n    textField: {\n        marginBottom: 5,\n    },\n    submitButton:{\n        float: \"right\",\n    }\n})\n\nfunction Register() {\n\n    const { dispatch } = useContext(AuthContext)\n    const classes = useStyles()\n\n    const initialRegisterInput = {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    }\n\n    const [registerInput, setRegisterInput] = useState(initialRegisterInput);\n    const [registerUser] = useMutation(REGISTER_USER,{\n        update(_, result){\n            console.log(result.data.register);\n            dispatch({type:\"LOGIN\", payload:result.data.register});\n        },\n        onError(err){\n            console.log(err);\n        },\n        variables: registerInput\n    })\n\n    const inputChangeHandler = (e) => {\n        setRegisterInput({\n            ...registerInput,\n            [e.target.id]: e.target.value\n        })\n    }\n    \n    return (\n        <div>\n            <TextField\n                fullWidth\n                className={classes.textField}\n                id='username' \n                value={registerInput.username} \n                onChange={inputChangeHandler}\n            />\n            <TextField\n                fullWidth\n                className={classes.textField}\n                id='email' \n                value={registerInput.email} \n                onChange={inputChangeHandler}\n            />\n            <TextField\n                fullWidth\n                className={classes.textField}\n                id='password' \n                value={registerInput.password} \n                onChange={inputChangeHandler}\n            />\n            <TextField\n                fullWidth\n                className={classes.textField}\n                id='confirmPassword' \n                value={registerInput.confirmPassword} \n                onChange={inputChangeHandler}\n            />\n            <Button\n                className={classes.submitButton}\n                onClick={registerUser}\n            >\n                Register\n            </Button>\n\n            <input id='password' value={registerInput.password} onChange={inputChangeHandler}/>\n            <p>confirm password</p>\n            <input id='confirmPassword' value={registerInput.confirmPassword} onChange={inputChangeHandler}/>\n            <button onClick={registerUser}>Register</button>\n        </div>\n    );\n\n    // return (\n    //     <div>\n    //         <h1>Register</h1>\n    //         <p>username</p>\n    //         <input id='username' value={registerInput.username} onChange={inputChangeHandler}/>\n    //         <p>email</p>\n    //         <input id='email' value={registerInput.email} onChange={inputChangeHandler}/>\n    //         <p>password</p>\n    //         <input id='password' value={registerInput.password} onChange={inputChangeHandler}/>\n    //         <p>confirm password</p>\n    //         <input id='confirmPassword' value={registerInput.confirmPassword} onChange={inputChangeHandler}/>\n    //         <button onClick={registerUser}>Register</button>\n    //     </div>\n    // );\n}\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ){\n        register(\n            registerInput:{\n            username: $username\n            email: $email\n            password: $password\n            confirmPassword: $confirmPassword\n            }\n        ){\n            id\n            email\n            token\n            username\n            createdAt\n        }\n    }\n`;\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}