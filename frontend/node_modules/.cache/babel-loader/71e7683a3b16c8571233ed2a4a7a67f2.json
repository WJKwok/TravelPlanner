{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js\";\nimport React, { useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from './column';\nimport Form from './form';\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Board() {\n  const {\n    contextState,\n    dispatch\n  } = useContext(PlaceContext);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = contextState.columns[source.droppableId];\n    const finish = contextState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = contextState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...contextState,\n        columns: { ...contextState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...contextState,\n      columns: { ...contextState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, contextState.columnOrder.map(columnId => {\n    const column = contextState.columns[columnId];\n    const places = column.placeIds.map(placeId => contextState.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"col-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, contextState.dataColumn.map(columnId => {\n    const column = contextState.columns[columnId];\n    const places = column.placeIds.map(placeId => contextState.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  }))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js"],"names":["React","useContext","DragDropContext","Column","Form","PlaceContext","Board","contextState","dispatch","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","placeIds","splice","newColumn","newOrder","id","type","order","startplaceIds","newStart","finishplaceIds","newFinish","columnOrder","map","columnId","places","placeId","dataColumn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,YAAT,QAA6B,uBAA7B;;AAEA,SAASC,KAAT,GAAiB;AAEb,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA6BP,UAAU,CAACI,YAAD,CAA7C;;AAEA,QAAMI,SAAS,GAAGC,MAAM,IAAI;AACxB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,QAAuCH,MAA7C;;AAEA,QAAI,CAACC,WAAL,EAAkB;AACd;AACH;;AAED,QACIA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAFjC,EAGE;AACE;AACH;;AAED,UAAMC,KAAK,GAAGT,YAAY,CAACU,OAAb,CAAqBL,MAAM,CAACE,WAA5B,CAAd;AACA,UAAMI,MAAM,GAAGX,YAAY,CAACU,OAAb,CAAqBN,WAAW,CAACG,WAAjC,CAAf,CAfwB,CAiBxB;;AACA,QAAIE,KAAK,KAAKE,MAAd,EAAsB;AAClB,YAAMC,MAAM,GAAGZ,YAAY,CAACU,OAAb,CAAqBL,MAAM,CAACE,WAA5B,CAAf;AACA,YAAMM,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAApB;AACAH,MAAAA,WAAW,CAACI,MAAZ,CAAmBZ,MAAM,CAACG,KAA1B,EAAiC,CAAjC;AACAK,MAAAA,WAAW,CAACI,MAAZ,CAAmBb,WAAW,CAACI,KAA/B,EAAsC,CAAtC,EAAyCF,WAAzC;AAEA,YAAMY,SAAS,GAAG,EACd,GAAGN,MADW;AAEdI,QAAAA,QAAQ,EAAEH;AAFI,OAAlB;AAKA,YAAMM,QAAQ,GAAG,EACb,GAAGnB,YADU;AAEbU,QAAAA,OAAO,EAAE,EACL,GAAGV,YAAY,CAACU,OADX;AAEL,WAACQ,SAAS,CAACE,EAAX,GAAgBF;AAFX;AAFI,OAAjB;AAQAjB,MAAAA,QAAQ,CAAC;AAAEoB,QAAAA,IAAI,EAAC,cAAP;AAAuBC,QAAAA,KAAK,EAAE;AAACH,UAAAA;AAAD;AAA9B,OAAD,CAAR;AACA;AACH,KAvCuB,CAyCxB;;;AACA,UAAMI,aAAa,GAAGT,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACO,QAAjB,CAAtB;AACAO,IAAAA,aAAa,CAACN,MAAd,CAAqBZ,MAAM,CAACG,KAA5B,EAAmC,CAAnC;AACA,UAAMgB,QAAQ,GAAG,EACb,GAAGf,KADU;AAEbO,MAAAA,QAAQ,EAAEO;AAFG,KAAjB;AAKA,UAAME,cAAc,GAAGX,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,QAAlB,CAAvB;AACAS,IAAAA,cAAc,CAACR,MAAf,CAAsBb,WAAW,CAACI,KAAlC,EAAyC,CAAzC,EAA4CF,WAA5C;AACA,UAAMoB,SAAS,GAAG,EACd,GAAGf,MADW;AAEdK,MAAAA,QAAQ,EAAES;AAFI,KAAlB;AAMA,UAAMN,QAAQ,GAAG,EACb,GAAGnB,YADU;AAEbU,MAAAA,OAAO,EAAE,EACL,GAAGV,YAAY,CAACU,OADX;AAEL,SAACc,QAAQ,CAACJ,EAAV,GAAeI,QAFV;AAGL,SAACE,SAAS,CAACN,EAAX,GAAgBM;AAHX;AAFI,KAAjB;AASAzB,IAAAA,QAAQ,CAAC;AAAEoB,MAAAA,IAAI,EAAC,cAAP;AAAuBC,MAAAA,KAAK,EAAE;AAACH,QAAAA;AAAD;AAA9B,KAAD,CAAR;AACH,GAnED;;AAqEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEjB,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,YAAY,CAAC2B,WAAb,CAAyBC,GAAzB,CAA6BC,QAAQ,IAAI;AACtC,UAAMjB,MAAM,GAAGZ,YAAY,CAACU,OAAb,CAAqBmB,QAArB,CAAf;AACA,UAAMC,MAAM,GAAGlB,MAAM,CAACI,QAAP,CAAgBY,GAAhB,CAAoBG,OAAO,IACtC/B,YAAY,CAAC8B,MAAb,CAAoBC,OAApB,CADW,CAAf;AAIA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEnB,MAAM,CAACQ,EAApB;AAAwB,MAAA,MAAM,EAAER,MAAhC;AAAwC,MAAA,MAAM,EAAEkB,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAPA,CADL,CADJ,EAWI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK9B,YAAY,CAACgC,UAAb,CAAwBJ,GAAxB,CAA4BC,QAAQ,IAAI;AACrC,UAAMjB,MAAM,GAAGZ,YAAY,CAACU,OAAb,CAAqBmB,QAArB,CAAf;AACA,UAAMC,MAAM,GAAGlB,MAAM,CAACI,QAAP,CAAgBY,GAAhB,CAAoBG,OAAO,IACtC/B,YAAY,CAAC8B,MAAb,CAAoBC,OAApB,CADW,CAAf;AAIA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEnB,MAAM,CAACQ,EAApB;AAAwB,MAAA,MAAM,EAAER,MAAhC;AAAwC,MAAA,MAAM,EAAEkB,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAPA,CADL,CAXJ,CAFJ,CADJ;AA6BH;;AAED,eAAe/B,KAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport Column from './column';\nimport Form from './form';\n\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Board() {\n\n    const { contextState, dispatch } = useContext(PlaceContext);\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = contextState.columns[source.droppableId];\n        const finish = contextState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = contextState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...contextState,\n                columns: {\n                    ...contextState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...contextState,\n            columns: {\n                ...contextState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    return (\n        <div>\n            <Form/>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='col-container'>\n                    {contextState.columnOrder.map(columnId => {\n                        const column = contextState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            contextState.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n                <div className='col-container'>\n                    {contextState.dataColumn.map(columnId => {\n                        const column = contextState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            contextState.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}