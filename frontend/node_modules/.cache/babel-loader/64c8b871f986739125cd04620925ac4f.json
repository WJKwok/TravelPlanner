{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/itinerary.js\";\nimport React, { useState, useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, IconButton } from '@material-ui/core/';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\nimport DayBoard from '../Components/dayBoard';\nimport CategoryBoard from '../Components/categoryBoard';\nimport Form from '../Components/form';\nimport PlaceAutoComplete from '../Components/placeAutoComplete';\nimport { fetchCategories, fetchPlaceIds } from '../Services/googlePlaceApi';\nimport { PlaceContext } from '../Store/PlaceContext';\nconst useStyles = makeStyles({\n  buttonDiv: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  saveButton: {\n    height: 53\n  },\n  addButton: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\"\n    }\n  }\n});\n\nfunction Itinerary(props) {\n  const {\n    placeState,\n    dispatch\n  } = useContext(PlaceContext);\n  const [itineraryId, setItineraryId] = useState(props.match.params.itineraryId ? props.match.params.itineraryId : \"\");\n  const [saveError, setSaveError] = useState(\"\");\n  const classes = useStyles();\n  /* Causes infinite loop LOL\n  if (props.match.params.itineraryId) {\n      console.log('it is from the link');\n      setItineraryId(props.match.params.itineraryId);\n  };\n  */\n\n  async function fetchItineraryFromGoogle(data) {\n    dispatch({\n      type: \"CLEAR_STATE\"\n    });\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n    const dayPlans = data.getItinerary.dayPlans;\n    const city = data.getItinerary.city;\n    let placesFetched = {};\n    const trialApi = await fetchPlaceIds(dayPlans);\n    console.log(\"trial api: \", trialApi);\n\n    for (var i = 0; i < dayPlans.length; i++) {\n      const placeIds = dayPlans[i].placeIds; // moved to within reducer\n      // columns[`day-${i}`].placeIds = placeIds\n\n      for (var j = 0; j < placeIds.length; j++) {\n        const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`);\n        const placeData = await response.json();\n        let placeObject = {};\n        placeObject['id'] = placeIds[j];\n        placeObject['content'] = placeData.result.name;\n        placeObject['rating'] = placeData.result.rating;\n        placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n        placeObject['location'] = placeData.result.geometry.location;\n        console.log(placeObject); //console.log('every iteration:', Object.keys(placesFetched).length)\n\n        placesFetched[placeIds[j]] = placeObject;\n      }\n    } //console.log(\"before dispatch dataItinerary: \", data.getItinerary);\n    //console.log(\"before dispatch placesFetched: \", Object.keys(placesFetched).length)\n\n\n    dispatch({\n      type: \"LOAD_DAYS\",\n      payload: {\n        itinerary: data.getItinerary,\n        placesFetched\n      }\n    });\n    const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"]; //let extraSuggestions = [];\n\n    fetchCategories(placeTypes, city, dispatch); // for (var k = 0; k < placeTypes.length; k++){\n    //     const response = await fetch(`/place/textsearch/json?query=best+${placeTypes[k]}+${city}&key=${googlePlacesApi}`)\n    //     const extraSuggestions = await response.json();\n    //     dispatch({ type:\"LOAD_ITINERARY\", payload:{extraSuggestions, placeType: placeTypes[k]}})\n    // }\n  } // unnecessary if you don't need to access 'data' else where\n  // const { data } = \n\n\n  useQuery(GET_ITINERARY, {\n    // just doen't seem to work\n    // skip: itineraryId !== placeState.itineraryId,\n    onCompleted(data) {\n      // does not run when the component was not remounted and parameter in query does not change\n      if (itineraryId !== placeState.itineraryId) {\n        fetchItineraryFromGoogle(data);\n      }\n    },\n\n    variables: {\n      itineraryId\n    }\n  });\n  /* Tracking Changes in Data\n  While data is from useQuery, it is tagged to an id; and when you update the document via useMutation, this data changes! Even though the 'data' variable is not from there.\n  \n  useEffect(() => {\n      if(data){\n          fetchItineraryFromGoogle();\n      }\n  }, [data])\n  */\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = placeState.columns[source.droppableId];\n    const finish = placeState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = placeState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...placeState,\n        columns: { ...placeState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      console.log(newOrder);\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...placeState,\n      columns: { ...placeState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    console.log(newOrder);\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  let itinerary = [];\n  const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n  const [submitItinerary] = useMutation(mutation, {\n    // 'result' is the second parameter!\n    update(_, result) {\n      console.log(result.data);\n\n      if (!itineraryId) {\n        setItineraryId(result.data.submitItinerary.id);\n      }\n\n      setSaveError(\"\");\n    },\n\n    onError(err) {\n      setSaveError(err.graphQLErrors[0].extensions.exception.stacktrace[0]);\n    },\n\n    variables: {\n      dayPlans: itinerary,\n      city: placeState.location,\n      id: itineraryId\n    }\n  });\n\n  const addExtraDay = () => {\n    dispatch({\n      type: 'ADD_EXTRA_DAY'\n    });\n  };\n\n  const saveItinerary = () => {\n    const days = placeState.dayBoards;\n\n    for (var i = 0; i < days.length; i++) {\n      itinerary.push({\n        placeIds: placeState.columns[days[i]].placeIds\n      });\n    } //console.log(itinerary);\n\n\n    submitItinerary();\n  };\n\n  console.log(placeState);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }), itineraryId !== placeState.itineraryId ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"Loading\") : \"\", placeState.days !== 0 ? React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"day-and-search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(PlaceAutoComplete, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"day-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, placeState.dayBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(DayBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    });\n  }), placeState.dayBoards.length > 0 ? React.createElement(IconButton, {\n    className: classes.addButton,\n    disableRipple: true,\n    disableFocusRipple: true,\n    onClick: addExtraDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(AddCircleOutlineRoundedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  })) : \"\")), React.createElement(\"div\", {\n    className: classes.buttonDiv,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.saveButton,\n    variant: \"outlined\",\n    size: \"medium\",\n    onClick: saveItinerary,\n    startIcon: React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, \"Save Itinerary\")), saveError ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, saveError) : \"\", placeState.categoryBoards.length > 0 ? React.createElement(\"div\", {\n    className: \"place-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, placeState.categoryBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(CategoryBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    });\n  })) : null) : \"\");\n}\n\nconst SUBMIT_ITINERARY = gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`;\nexport default Itinerary;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Pages/itinerary.js"],"names":["React","useState","useContext","DragDropContext","useQuery","useMutation","gql","makeStyles","Button","IconButton","SaveIcon","AddCircleOutlineRoundedIcon","DayBoard","CategoryBoard","Form","PlaceAutoComplete","fetchCategories","fetchPlaceIds","PlaceContext","useStyles","buttonDiv","display","justifyContent","saveButton","height","addButton","backgroundColor","Itinerary","props","placeState","dispatch","itineraryId","setItineraryId","match","params","saveError","setSaveError","classes","fetchItineraryFromGoogle","data","type","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","dayPlans","getItinerary","city","placesFetched","trialApi","console","log","i","length","placeIds","j","response","fetch","placeData","json","placeObject","result","name","rating","photos","photo_reference","geometry","location","payload","itinerary","placeTypes","GET_ITINERARY","onCompleted","variables","onDragEnd","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","splice","newColumn","newOrder","id","order","startplaceIds","newStart","finishplaceIds","newFinish","mutation","SAVE_ITINERARY","SUBMIT_ITINERARY","submitItinerary","update","_","onError","err","graphQLErrors","extensions","exception","stacktrace","addExtraDay","saveItinerary","days","dayBoards","push","map","columnId","places","placeId","categoryBoards"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, IconButton} from '@material-ui/core/';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\n\nimport DayBoard from '../Components/dayBoard';\nimport CategoryBoard from '../Components/categoryBoard';\nimport Form from '../Components/form';\nimport PlaceAutoComplete from '../Components/placeAutoComplete'\nimport { fetchCategories, fetchPlaceIds } from '../Services/googlePlaceApi'\n\n\nimport { PlaceContext } from '../Store/PlaceContext';\n\n\nconst useStyles = makeStyles({\n    buttonDiv: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n    },\n    saveButton: {\n        height: 53,\n    },\n    addButton: {\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        },\n    },\n})\n\n\nfunction Itinerary(props) {\n\n    const { placeState, dispatch } = useContext(PlaceContext);\n    const [ itineraryId, setItineraryId ] = useState(props.match.params.itineraryId ? props.match.params.itineraryId : \"\");\n    const [ saveError, setSaveError ] = useState(\"\")\n\n    const classes = useStyles();\n    \n    /* Causes infinite loop LOL\n    if (props.match.params.itineraryId) {\n        console.log('it is from the link');\n        setItineraryId(props.match.params.itineraryId);\n    };\n    */\n\n    async function fetchItineraryFromGoogle(data) {\n\n        dispatch({type:\"CLEAR_STATE\"});\n\n        const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n        const dayPlans = data.getItinerary.dayPlans;\n        const city = data.getItinerary.city;\n        let placesFetched = {};\n\n        const trialApi = await fetchPlaceIds(dayPlans);\n        console.log(\"trial api: \", trialApi);\n\n        for(var i = 0; i < dayPlans.length; i++) {\n            const placeIds = dayPlans[i].placeIds\n            // moved to within reducer\n            // columns[`day-${i}`].placeIds = placeIds\n            for(var j = 0; j < placeIds.length; j++){\n                const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`)\n                const placeData = await response.json();\n\n                let placeObject = {};\n                placeObject['id'] = placeIds[j]\n                placeObject['content'] = placeData.result.name;\n                placeObject['rating'] = placeData.result.rating;\n                placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n                placeObject['location'] = placeData.result.geometry.location;\n                \n                console.log(placeObject);\n                //console.log('every iteration:', Object.keys(placesFetched).length)\n                placesFetched[placeIds[j]] = placeObject;\n            }\n        }\n        //console.log(\"before dispatch dataItinerary: \", data.getItinerary);\n        //console.log(\"before dispatch placesFetched: \", Object.keys(placesFetched).length)\n        dispatch({ type:\"LOAD_DAYS\", payload:{itinerary: data.getItinerary, placesFetched}})\n\n        const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n        //let extraSuggestions = [];\n\n        fetchCategories(placeTypes, city, dispatch);\n        // for (var k = 0; k < placeTypes.length; k++){\n        //     const response = await fetch(`/place/textsearch/json?query=best+${placeTypes[k]}+${city}&key=${googlePlacesApi}`)\n        //     const extraSuggestions = await response.json();\n        //     dispatch({ type:\"LOAD_ITINERARY\", payload:{extraSuggestions, placeType: placeTypes[k]}})\n        // }\n\n    }\n\n    // unnecessary if you don't need to access 'data' else where\n    // const { data } = \n    useQuery(GET_ITINERARY, {\n        // just doen't seem to work\n        // skip: itineraryId !== placeState.itineraryId,\n        onCompleted(data){\n            // does not run when the component was not remounted and parameter in query does not change\n            if (itineraryId !== placeState.itineraryId){\n                fetchItineraryFromGoogle(data);\n            }\n        },\n        variables: {itineraryId}\n    })\n\n    /* Tracking Changes in Data\n    While data is from useQuery, it is tagged to an id; and when you update the document via useMutation, this data changes! Even though the 'data' variable is not from there.\n    \n    useEffect(() => {\n        if(data){\n            fetchItineraryFromGoogle();\n        }\n    }, [data])\n    */\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = placeState.columns[source.droppableId];\n        const finish = placeState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = placeState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...placeState,\n                columns: {\n                    ...placeState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n            console.log(newOrder);\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...placeState,\n            columns: {\n                ...placeState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        console.log(newOrder);\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    let itinerary = [];\n    const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n    const [submitItinerary] = useMutation(mutation, {\n        // 'result' is the second parameter!\n        update(_, result){\n            console.log(result.data);\n\n            if (!itineraryId) {\n                setItineraryId(result.data.submitItinerary.id)\n            }\n            setSaveError(\"\");\n        },\n        onError(err){\n            setSaveError(err.graphQLErrors[0].extensions.exception.stacktrace[0]);\n        },\n        variables: {\n            dayPlans: itinerary,\n            city: placeState.location,\n            id: itineraryId\n        }\n    })\n\n    const addExtraDay = () => {\n        dispatch({type:'ADD_EXTRA_DAY'});\n    }\n\n    const saveItinerary = () => {\n        const days = placeState.dayBoards;\n        for (var i = 0; i < days.length; i ++){\n            itinerary.push({\n                placeIds: placeState.columns[days[i]].placeIds\n            });\n            \n        }\n        //console.log(itinerary);\n        submitItinerary();\n    }\n\n    console.log(placeState);\n\n    return (\n        <div>\n            <Form/>\n            {itineraryId !== placeState.itineraryId ? <p>Loading</p> : \"\"}\n            {placeState.days !== 0 \n            ? <DragDropContext onDragEnd={onDragEnd}>\n                <div className='day-and-search'>\n                    <PlaceAutoComplete/>\n                    \n                    <div className='day-boards-container'>\n                        {placeState.dayBoards.map(columnId => {\n                            const column = placeState.columns[columnId];\n                            const places = column.placeIds.map(placeId => \n                                placeState.places[placeId]\n                            );\n\n                            return <DayBoard key={column.id} column={column} places={places}/>\n                        })}\n                        {placeState.dayBoards.length > 0 ?\n                            <IconButton \n                                className={classes.addButton}\n                                disableRipple={true}\n                                disableFocusRipple={true}\n                                onClick={addExtraDay}>\n                                <AddCircleOutlineRoundedIcon />\n                            </IconButton>\n                            : \"\"}\n                    </div>\n                </div>\n                <div className={classes.buttonDiv}>\n                    <Button \n                        className={classes.saveButton}\n                        variant=\"outlined\" \n                        size=\"medium\" \n                        onClick={saveItinerary}\n                        startIcon={<SaveIcon />}\n                    >\n                        Save Itinerary\n                    </Button>\n                </div>\n                {saveError ? <p>{saveError}</p> : \"\"}\n                {placeState.categoryBoards.length > 0 \n                ? <div className='place-boards-container'>\n                    {placeState.categoryBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n                        return <CategoryBoard key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n                : null}\n                \n            </DragDropContext>\n            : \"\"}\n        </div>\n        \n    );\n\n}\n\nconst SUBMIT_ITINERARY =  gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`\n\nexport default Itinerary;"]},"metadata":{},"sourceType":"module"}