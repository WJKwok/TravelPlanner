{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Store/AuthContext.js\";\nimport React, { createContext, useReducer, useContext } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport { PlaceContext } from './PlaceContext';\nconst {\n  dispatch: placeDispatch\n} = useContext(PlaceContext); //this is not necessary but good practice\n\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem('jwtToken')) {\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext();\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      localStorage.setItem('jwtToken', action.payload.token);\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      localStorage.removeItem('jwtToken');\n      placeDispatch({\n        type: 'CLEAR_STATE'\n      });\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction AuthContextProvider(props) {\n  //initial state can be just {} but this is good practice\n  const [authState, dispatch] = useReducer(authReducer, initialState);\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      authState,\n      dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, props.children);\n}\n\nexport { AuthContext, AuthContextProvider };","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Store/AuthContext.js"],"names":["React","createContext","useReducer","useContext","jwtDecode","PlaceContext","dispatch","placeDispatch","initialState","user","localStorage","getItem","decodedToken","exp","Date","now","removeItem","AuthContext","authReducer","state","action","type","setItem","payload","token","AuthContextProvider","props","authState","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,MAAM;AAAEC,EAAAA,QAAQ,EAAEC;AAAZ,IAA8BJ,UAAU,CAACE,YAAD,CAA9C,C,CACA;;AACA,MAAMG,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;;AAIA,IAAIC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAJ,EAAqC;AACjC,QAAMC,YAAY,GAAGR,SAAS,CAACM,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAA9B;;AAEA,MAAIC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA9B,EAA0C;AACtCL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD,MAEO;AACHR,IAAAA,YAAY,CAACC,IAAb,GAAoBG,YAApB;AACH;AAEJ;;AAED,MAAMK,WAAW,GAAGhB,aAAa,EAAjC;;AAEA,MAAMiB,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,OAAL;AACIX,MAAAA,YAAY,CAACY,OAAb,CAAqB,UAArB,EAAiCF,MAAM,CAACG,OAAP,CAAeC,KAAhD;AACA,aAAO,EACH,GAAGL,KADA;AAEHV,QAAAA,IAAI,EAAEW,MAAM,CAACG;AAFV,OAAP;;AAIJ,SAAK,QAAL;AACIb,MAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAT,MAAAA,aAAa,CAAC;AAACc,QAAAA,IAAI,EAAC;AAAN,OAAD,CAAb;AACA,aAAO,EACH,GAAGF,KADA;AAEHV,QAAAA,IAAI,EAAE;AAFH,OAAP;;AAIJ;AACI,aAAOU,KAAP;AAfR;AAiBH,CAlBD;;AAoBA,SAASM,mBAAT,CAA6BC,KAA7B,EAAoC;AAEhC;AACA,QAAM,CAACC,SAAD,EAAYrB,QAAZ,IAAwBJ,UAAU,CAACgB,WAAD,EAAcV,YAAd,CAAxC;AAEA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEmB,MAAAA,SAAF;AAAarB,MAAAA;AAAb,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKoB,KAAK,CAACE,QADX,CADJ;AAKH;;AAED,SAASX,WAAT,EAAsBQ,mBAAtB","sourcesContent":["import React, { createContext, useReducer, useContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\nimport { PlaceContext } from './PlaceContext';\n\nconst { dispatch: placeDispatch } = useContext(PlaceContext);\n//this is not necessary but good practice\nconst initialState = {\n    user: null\n};\n\nif (localStorage.getItem('jwtToken')){\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n    if (decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem('jwtToken');\n    } else {\n        initialState.user = decodedToken;\n    }\n    \n}\n\nconst AuthContext = createContext();\n\nconst authReducer = (state, action) => {\n    switch(action.type) {\n        case 'LOGIN':\n            localStorage.setItem('jwtToken', action.payload.token);\n            return {\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT':\n            localStorage.removeItem('jwtToken');\n            placeDispatch({type:'CLEAR_STATE'});\n            return {\n                ...state,\n                user: null\n            };\n        default:\n            return state;\n    }\n}\n\nfunction AuthContextProvider(props) {\n\n    //initial state can be just {} but this is good practice\n    const [authState, dispatch] = useReducer(authReducer, initialState);\n\n    return(\n        <AuthContext.Provider value={{ authState, dispatch }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport { AuthContext, AuthContextProvider };"]},"metadata":{},"sourceType":"module"}