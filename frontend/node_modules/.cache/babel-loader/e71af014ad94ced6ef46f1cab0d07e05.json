{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js\";\nimport React, { useContext, useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from '../Store/initial-data';\nimport Column from './column';\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Board() {\n  const {\n    contextState,\n    dispatch\n  } = useContext(PlaceContext);\n  const [type, setType] = useState('Restaurants');\n  const [days, setDays] = useState(0);\n  const [location, setLocation] = useState('');\n  const [state, setState] = React.useState(initialData);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = contextState.columns[source.droppableId];\n    const finish = contextState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = contextState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...contextState,\n        columns: { ...contextState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...contextState,\n      columns: { ...contextState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  const changeHandler = e => {\n    setState({ ...contextState,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  const clickHandler = async () => {\n    console.log(contextState); // https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors \n    // added proxy in package.json \"proxy\": \"https://maps.googleapis.com/maps/api\"\n\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n    const response = await fetch(`/place/textsearch/json?query=${type}+${location}&key=${googlePlacesApi}`);\n    const data = await response.json();\n    dispatch({\n      type: 'SHOW_PLACES',\n      search: {\n        data,\n        days\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"select-css\",\n    id: \"type\",\n    value: type,\n    onChange: e => setType(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"Restaurants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Restaurants\"), React.createElement(\"option\", {\n    value: \"Hotels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Hotels\"), React.createElement(\"option\", {\n    value: \"Tourist+attraction\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Tourist+attraction\")), React.createElement(\"input\", {\n    id: \"place\",\n    placeholder: \"City\",\n    type: \"text\",\n    value: location,\n    onChange: e => setLocation(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"number\",\n    placeholder: \"No. of Days\",\n    type: \"text\",\n    value: days,\n    onChange: e => setDays(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: clickHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, contextState.columnOrder.map(columnId => {\n    const column = contextState.columns[columnId];\n    const places = column.placeIds.map(placeId => contextState.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, contextState.dataColumn.map(columnId => {\n    const column = contextState.columns[columnId];\n    const places = column.placeIds.map(placeId => contextState.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    });\n  }))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js"],"names":["React","useContext","useState","DragDropContext","initialData","Column","PlaceContext","Board","contextState","dispatch","type","setType","days","setDays","location","setLocation","state","setState","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","placeIds","splice","newColumn","newOrder","id","order","startplaceIds","newStart","finishplaceIds","newFinish","changeHandler","e","target","value","clickHandler","console","log","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","response","fetch","data","json","search","columnOrder","map","columnId","places","placeId","dataColumn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,YAAT,QAA6B,uBAA7B;;AAEA,SAASC,KAAT,GAAiB;AAEb,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA6BR,UAAU,CAACK,YAAD,CAA7C;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,aAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBjB,KAAK,CAACE,QAAN,CAAeE,WAAf,CAA1B;;AAEA,QAAMc,SAAS,GAAGC,MAAM,IAAI;AACxB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,QAAuCH,MAA7C;;AAEA,QAAI,CAACC,WAAL,EAAkB;AACd;AACH;;AAED,QACIA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAFjC,EAGE;AACE;AACH;;AAED,UAAMC,KAAK,GAAGjB,YAAY,CAACkB,OAAb,CAAqBL,MAAM,CAACE,WAA5B,CAAd;AACA,UAAMI,MAAM,GAAGnB,YAAY,CAACkB,OAAb,CAAqBN,WAAW,CAACG,WAAjC,CAAf,CAfwB,CAiBxB;;AACA,QAAIE,KAAK,KAAKE,MAAd,EAAsB;AAClB,YAAMC,MAAM,GAAGpB,YAAY,CAACkB,OAAb,CAAqBL,MAAM,CAACE,WAA5B,CAAf;AACA,YAAMM,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,QAAlB,CAApB;AACAH,MAAAA,WAAW,CAACI,MAAZ,CAAmBZ,MAAM,CAACG,KAA1B,EAAiC,CAAjC;AACAK,MAAAA,WAAW,CAACI,MAAZ,CAAmBb,WAAW,CAACI,KAA/B,EAAsC,CAAtC,EAAyCF,WAAzC;AAEA,YAAMY,SAAS,GAAG,EACd,GAAGN,MADW;AAEdI,QAAAA,QAAQ,EAAEH;AAFI,OAAlB;AAKA,YAAMM,QAAQ,GAAG,EACb,GAAG3B,YADU;AAEbkB,QAAAA,OAAO,EAAE,EACL,GAAGlB,YAAY,CAACkB,OADX;AAEL,WAACQ,SAAS,CAACE,EAAX,GAAgBF;AAFX;AAFI,OAAjB;AAQAzB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAC,cAAP;AAAuB2B,QAAAA,KAAK,EAAE;AAACF,UAAAA;AAAD;AAA9B,OAAD,CAAR;AACA;AACH,KAvCuB,CAyCxB;;;AACA,UAAMG,aAAa,GAAGR,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACO,QAAjB,CAAtB;AACAM,IAAAA,aAAa,CAACL,MAAd,CAAqBZ,MAAM,CAACG,KAA5B,EAAmC,CAAnC;AACA,UAAMe,QAAQ,GAAG,EACb,GAAGd,KADU;AAEbO,MAAAA,QAAQ,EAAEM;AAFG,KAAjB;AAKA,UAAME,cAAc,GAAGV,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,QAAlB,CAAvB;AACAQ,IAAAA,cAAc,CAACP,MAAf,CAAsBb,WAAW,CAACI,KAAlC,EAAyC,CAAzC,EAA4CF,WAA5C;AACA,UAAMmB,SAAS,GAAG,EACd,GAAGd,MADW;AAEdK,MAAAA,QAAQ,EAAEQ;AAFI,KAAlB;AAMA,UAAML,QAAQ,GAAG,EACb,GAAG3B,YADU;AAEbkB,MAAAA,OAAO,EAAE,EACL,GAAGlB,YAAY,CAACkB,OADX;AAEL,SAACa,QAAQ,CAACH,EAAV,GAAeG,QAFV;AAGL,SAACE,SAAS,CAACL,EAAX,GAAgBK;AAHX;AAFI,KAAjB;AASAhC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAC,cAAP;AAAuB2B,MAAAA,KAAK,EAAE;AAACF,QAAAA;AAAD;AAA9B,KAAD,CAAR;AACH,GAnED;;AAqEA,QAAMO,aAAa,GAAIC,CAAD,IAAO;AACzB1B,IAAAA,QAAQ,CAAC,EACL,GAAGT,YADE;AAEL,OAACmC,CAAC,CAACC,MAAF,CAASR,EAAV,GAAeO,CAAC,CAACC,MAAF,CAASC;AAFnB,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMC,YAAY,GAAG,YAAY;AAE7BC,IAAAA,OAAO,CAACC,GAAR,CAAYxC,YAAZ,EAF6B,CAI7B;AACA;;AACA,UAAMyC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAApC;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+B5C,IAAK,IAAGI,QAAS,QAAOmC,eAAgB,EAAzE,CAA5B;AACA,UAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA/C,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAC,aAAP;AAAsB+C,MAAAA,MAAM,EAAE;AAACF,QAAAA,IAAD;AAAO3C,QAAAA;AAAP;AAA9B,KAAD,CAAR;AAEH,GAZD;;AAcA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,EAAE,EAAC,MAAlC;AAAyC,IAAA,KAAK,EAAEF,IAAhD;AAAsD,IAAA,QAAQ,EAAGiC,CAAD,IAAOhC,OAAO,CAACgC,CAAC,CAACC,MAAF,CAASC,KAAV,CAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGI;AAAQ,IAAA,KAAK,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHJ,CADJ,EAMI;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,WAAW,EAAC,MAA9B;AAAqC,IAAA,IAAI,EAAC,MAA1C;AAAiD,IAAA,KAAK,EAAE/B,QAAxD;AAAkE,IAAA,QAAQ,EAAG6B,CAAD,IAAO5B,WAAW,CAAC4B,CAAC,CAACC,MAAF,CAASC,KAAV,CAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI;AAAO,IAAA,EAAE,EAAC,QAAV;AAAmB,IAAA,WAAW,EAAC,aAA/B;AAA6C,IAAA,IAAI,EAAC,MAAlD;AAAyD,IAAA,KAAK,EAAEjC,IAAhE;AAAsE,IAAA,QAAQ,EAAG+B,CAAD,IAAO9B,OAAO,CAAC8B,CAAC,CAACC,MAAF,CAASC,KAAV,CAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,CADJ,EAWI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAE5B,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKV,YAAY,CAACkD,WAAb,CAAyBC,GAAzB,CAA6BC,QAAQ,IAAI;AACtC,UAAMhC,MAAM,GAAGpB,YAAY,CAACkB,OAAb,CAAqBkC,QAArB,CAAf;AACA,UAAMC,MAAM,GAAGjC,MAAM,CAACI,QAAP,CAAgB2B,GAAhB,CAAoBG,OAAO,IACtCtD,YAAY,CAACqD,MAAb,CAAoBC,OAApB,CADW,CAAf;AAIA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAElC,MAAM,CAACQ,EAApB;AAAwB,MAAA,MAAM,EAAER,MAAhC;AAAwC,MAAA,MAAM,EAAEiC,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAPA,CADL,CADJ,EAWI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrD,YAAY,CAACuD,UAAb,CAAwBJ,GAAxB,CAA4BC,QAAQ,IAAI;AACrC,UAAMhC,MAAM,GAAGpB,YAAY,CAACkB,OAAb,CAAqBkC,QAArB,CAAf;AACA,UAAMC,MAAM,GAAGjC,MAAM,CAACI,QAAP,CAAgB2B,GAAhB,CAAoBG,OAAO,IACtCtD,YAAY,CAACqD,MAAb,CAAoBC,OAApB,CADW,CAAf;AAIA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAElC,MAAM,CAACQ,EAApB;AAAwB,MAAA,MAAM,EAAER,MAAhC;AAAwC,MAAA,MAAM,EAAEiC,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAPA,CADL,CAXJ,CAXJ,CADJ;AAsCH;;AAED,eAAetD,KAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Board() {\n\n    const { contextState, dispatch } = useContext(PlaceContext);\n    const [type, setType] = useState('Restaurants');\n    const [days, setDays] = useState(0);\n    const [location, setLocation] = useState('');\n\n    const [state, setState] = React.useState(initialData);\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = contextState.columns[source.droppableId];\n        const finish = contextState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = contextState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...contextState,\n                columns: {\n                    ...contextState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...contextState,\n            columns: {\n                ...contextState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    const changeHandler = (e) => {\n        setState({\n            ...contextState,\n            [e.target.id]: e.target.value\n        })\n    };\n\n    const clickHandler = async () => {\n\n        console.log(contextState);\n\n        // https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors \n        // added proxy in package.json \"proxy\": \"https://maps.googleapis.com/maps/api\"\n        const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n        const response = await fetch(`/place/textsearch/json?query=${type}+${location}&key=${googlePlacesApi}`)\n        const data = await response.json();\n\n        dispatch({ type:'SHOW_PLACES', search: {data, days}});\n    \n    };\n\n    return (\n        <div>\n            <div>\n                <select className=\"select-css\" id='type' value={type} onChange={(e) => setType(e.target.value)}>\n                    <option value=\"Restaurants\">Restaurants</option>\n                    <option value=\"Hotels\">Hotels</option>\n                    <option value=\"Tourist+attraction\">Tourist+attraction</option>\n                </select>\n                <input id='place' placeholder='City' type=\"text\" value={location} onChange={(e) => setLocation(e.target.value)}/>\n                <input id='number' placeholder='No. of Days' type=\"text\" value={days} onChange={(e) => setDays(e.target.value)}/>\n                <button type='submit' onClick={clickHandler}>Submit</button>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='container'>\n                    {contextState.columnOrder.map(columnId => {\n                        const column = contextState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            contextState.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n                <div className='container'>\n                    {contextState.dataColumn.map(columnId => {\n                        const column = contextState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            contextState.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}