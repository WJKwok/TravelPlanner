{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/page.js\";\nimport React, { useState, useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport DayBoard from './dayBoard';\nimport CategoryBoard from './categoryBoard';\nimport Form from './form';\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Page(props) {\n  const {\n    placeState,\n    dispatch\n  } = useContext(PlaceContext);\n  const [itineraryId, setItineraryId] = useState(props.match.params.itineraryId);\n  /* Causes infinite loop LOL\n  if (props.match.params.itineraryId) {\n      console.log('it is from the link');\n      setItineraryId(props.match.params.itineraryId);\n  };\n  */\n\n  async function fetchItineraryFromGoogle(data) {\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n    const dayPlans = data.getItinerary.dayPlans;\n    const city = data.getItinerary.city;\n    let placesFetched = {};\n\n    for (var i = 0; i < dayPlans.length; i++) {\n      const placeIds = dayPlans[i].placeIds; // moved to within reducer\n      // columns[`day-${i}`].placeIds = placeIds\n\n      for (var j = 0; j < placeIds.length; j++) {\n        const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`);\n        const placeData = await response.json();\n        let placeObject = {};\n        placeObject['id'] = placeIds[j];\n        placeObject['content'] = placeData.result.name;\n        placeObject['rating'] = placeData.result.rating;\n        placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n        placeObject['location'] = placeData.result.geometry.location;\n        console.log(placeObject);\n        placesFetched[placeIds[j]] = placeObject;\n      }\n    }\n\n    const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n    let extraSuggestions = [];\n\n    for (var k = 0; k < placeTypes.length; k++) {\n      const response = await fetch(`/place/textsearch/json?query=best+${placeTypes[k]}+${city}&key=${googlePlacesApi}`);\n      const data = await response.json();\n      extraSuggestions.push(data);\n    }\n\n    dispatch({\n      type: \"LOAD_ITINERARY\",\n      payload: {\n        itinerary: data.getItinerary,\n        placesFetched,\n        extraSuggestions\n      }\n    });\n  }\n\n  useQuery(GET_ITINERARY, {\n    // just doen't seem to work\n    // skip: itineraryId !== placeState.itineraryId,\n    onCompleted(data) {\n      // does not run when the component was not remounted and parameter in query does not change\n      if (itineraryId !== placeState.itineraryId) {\n        fetchItineraryFromGoogle(data);\n      }\n    },\n\n    variables: {\n      itineraryId\n    }\n  });\n  /* Tracking Changes in Data\n  While data is from useQuery, it is tagged to an id; and when you update the document via useMutation, this data changes! Even though the 'data' variable is not from there.\n  \n  useEffect(() => {\n      if(data){\n          fetchItineraryFromGoogle();\n      }\n  }, [data])\n  */\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = placeState.columns[source.droppableId];\n    const finish = placeState.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = placeState.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newOrder = { ...placeState,\n        columns: { ...placeState.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      console.log(newOrder);\n      dispatch({\n        type: 'CHANGE_ORDER',\n        order: {\n          newOrder\n        }\n      });\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newOrder = { ...placeState,\n      columns: { ...placeState.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    console.log(newOrder);\n    dispatch({\n      type: 'CHANGE_ORDER',\n      order: {\n        newOrder\n      }\n    });\n  };\n\n  let itinerary = [];\n  const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n  const [submitItinerary] = useMutation(mutation, {\n    // 'result' is the second parameter!\n    update(_, result) {\n      console.log(result.data);\n\n      if (!itineraryId) {\n        setItineraryId(result.data.submitItinerary.id);\n      }\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: {\n      dayPlans: itinerary,\n      city: placeState.location,\n      id: itineraryId\n    }\n  });\n\n  const addExtraDay = () => {\n    dispatch({\n      type: 'ADD_EXTRA_DAY'\n    });\n  };\n\n  const saveItinerary = () => {\n    const days = placeState.dayBoards;\n\n    for (var i = 0; i < days.length; i++) {\n      itinerary.push({\n        placeIds: placeState.columns[days[i]].placeIds\n      });\n    } //console.log(itinerary);\n\n\n    submitItinerary();\n  };\n\n  console.log(placeState);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), itineraryId !== placeState.itineraryId ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Loading\") : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Loaded\"), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"day-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, placeState.dayBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(DayBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    });\n  }), placeState.dayBoards.length > 0 ? React.createElement(\"button\", {\n    className: \"extra-day\",\n    onClick: addExtraDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"+\") : \"\"), React.createElement(\"button\", {\n    onClick: saveItinerary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Save Itinerary\"), React.createElement(\"div\", {\n    className: \"place-boards-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, placeState.categoryBoards.map(columnId => {\n    const column = placeState.columns[columnId];\n    const places = column.placeIds.map(placeId => placeState.places[placeId]);\n    return React.createElement(CategoryBoard, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    });\n  }))));\n}\n\nconst SUBMIT_ITINERARY = gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`;\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`;\nexport default Page;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/client/src/Components/page.js"],"names":["React","useState","useContext","DragDropContext","useQuery","useMutation","gql","DayBoard","CategoryBoard","Form","PlaceContext","Page","props","placeState","dispatch","itineraryId","setItineraryId","match","params","fetchItineraryFromGoogle","data","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","dayPlans","getItinerary","city","placesFetched","i","length","placeIds","j","response","fetch","placeData","json","placeObject","result","name","rating","photos","photo_reference","geometry","location","console","log","placeTypes","extraSuggestions","k","push","type","payload","itinerary","GET_ITINERARY","onCompleted","variables","onDragEnd","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","splice","newColumn","newOrder","id","order","startplaceIds","newStart","finishplaceIds","newFinish","mutation","SAVE_ITINERARY","SUBMIT_ITINERARY","submitItinerary","update","_","onError","err","addExtraDay","saveItinerary","days","dayBoards","map","columnId","places","placeId","categoryBoards"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport DayBoard from './dayBoard';\nimport CategoryBoard from './categoryBoard';\nimport Form from './form';\n\nimport { PlaceContext } from '../Store/PlaceContext';\n\nfunction Page(props) {\n\n    const { placeState, dispatch } = useContext(PlaceContext);\n    const [ itineraryId, setItineraryId ] = useState(props.match.params.itineraryId);\n    \n    /* Causes infinite loop LOL\n    if (props.match.params.itineraryId) {\n        console.log('it is from the link');\n        setItineraryId(props.match.params.itineraryId);\n    };\n    */\n\n    async function fetchItineraryFromGoogle(data) {\n\n        const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n        const dayPlans = data.getItinerary.dayPlans;\n        const city = data.getItinerary.city;\n        let placesFetched = {};\n        \n        for(var i = 0; i < dayPlans.length; i++) {\n            const placeIds = dayPlans[i].placeIds\n            // moved to within reducer\n            // columns[`day-${i}`].placeIds = placeIds\n            for(var j = 0; j < placeIds.length; j++){\n                const response = await fetch(`/place/details/json?placeid=${placeIds[j]}&key=${googlePlacesApi}`)\n                const placeData = await response.json();\n\n                let placeObject = {};\n                placeObject['id'] = placeIds[j]\n                placeObject['content'] = placeData.result.name;\n                placeObject['rating'] = placeData.result.rating;\n                placeObject['photoRef'] = placeData.result.photos ? placeData.result.photos[0].photo_reference : \"0\";\n                placeObject['location'] = placeData.result.geometry.location;\n                \n                console.log(placeObject);\n                placesFetched[placeIds[j]] = placeObject;\n            }\n        }\n\n        const placeTypes = ['Restaurants', \"Hotels\", \"Tourist+attraction\"];\n        let extraSuggestions = [];\n\n        for (var k = 0; k < placeTypes.length; k++){\n            const response = await fetch(`/place/textsearch/json?query=best+${placeTypes[k]}+${city}&key=${googlePlacesApi}`)\n            const data = await response.json();\n            extraSuggestions.push(data);\n        }\n\n        dispatch({ type:\"LOAD_ITINERARY\", payload:{itinerary: data.getItinerary, placesFetched, extraSuggestions}})\n    }\n\n    useQuery(GET_ITINERARY, {\n        // just doen't seem to work\n        // skip: itineraryId !== placeState.itineraryId,\n        onCompleted(data){\n            // does not run when the component was not remounted and parameter in query does not change\n            if (itineraryId !== placeState.itineraryId){\n                fetchItineraryFromGoogle(data);\n            }\n        },\n        variables: {itineraryId}\n    })\n\n    /* Tracking Changes in Data\n    While data is from useQuery, it is tagged to an id; and when you update the document via useMutation, this data changes! Even though the 'data' variable is not from there.\n    \n    useEffect(() => {\n        if(data){\n            fetchItineraryFromGoogle();\n        }\n    }, [data])\n    */\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = placeState.columns[source.droppableId];\n        const finish = placeState.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = placeState.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newOrder = {\n                ...placeState,\n                columns: {\n                    ...placeState.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n            console.log(newOrder);\n            dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newOrder = {\n            ...placeState,\n            columns: {\n                ...placeState.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        console.log(newOrder);\n        dispatch({ type:'CHANGE_ORDER', order: {newOrder}});\n    };\n\n    let itinerary = [];\n    const mutation = itineraryId ? SAVE_ITINERARY : SUBMIT_ITINERARY;\n    const [submitItinerary] = useMutation(mutation, {\n        // 'result' is the second parameter!\n        update(_, result){\n            console.log(result.data);\n\n            if (!itineraryId) {\n                setItineraryId(result.data.submitItinerary.id)\n            }\n        },\n        onError(err){\n            console.log(err)\n        },\n        variables: {\n            dayPlans: itinerary,\n            city: placeState.location,\n            id: itineraryId\n        }\n    })\n\n    const addExtraDay = () => {\n        dispatch({type:'ADD_EXTRA_DAY'});\n    }\n\n    const saveItinerary = () => {\n        const days = placeState.dayBoards;\n        for (var i = 0; i < days.length; i ++){\n            itinerary.push({\n                placeIds: placeState.columns[days[i]].placeIds\n            });\n            \n        }\n        //console.log(itinerary);\n        submitItinerary();\n    }\n\n    console.log(placeState);\n\n    return (\n        <div>\n            <Form/>\n            {itineraryId !== placeState.itineraryId ? <p>Loading</p> : <p>Loaded</p>}\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='day-boards-container'>\n                    {placeState.dayBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n\n                        return <DayBoard key={column.id} column={column} places={places}/>\n                    })}\n                    {placeState.dayBoards.length > 0 ? <button className=\"extra-day\" onClick={addExtraDay}>+</button> : \"\"}\n                    \n                </div>\n                <button onClick={saveItinerary}>Save Itinerary</button>\n                <div className='place-boards-container'>\n                    {placeState.categoryBoards.map(columnId => {\n                        const column = placeState.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            placeState.places[placeId]\n                        );\n\n                        return <CategoryBoard key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n\n}\n\nconst SUBMIT_ITINERARY =  gql`\n    mutation submitItinerary(\n        $dayPlans: [DayPlanInput]!\n        $city: String!\n    ){\n        submitItinerary(\n            dayPlans: $dayPlans\n            city: $city\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst SAVE_ITINERARY = gql`\n    mutation saveItinerary(\n        $id: ID!\n        $dayPlans: [DayPlanInput]!\n    ){\n        saveItinerary(\n            dayPlans: $dayPlans\n            id: $id\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username\n        }\n    }\n`\n\nconst GET_ITINERARY = gql`\n    query getItinerary(\n        $itineraryId: ID!\n    ){\n        getItinerary(\n            itineraryId: $itineraryId\n        ){\n            id\n            city\n            dayPlans{\n                placeIds\n            }\n            createdAt\n            user\n            username \n        }\n    }\n`\n\nexport default Page;"]},"metadata":{},"sourceType":"module"}