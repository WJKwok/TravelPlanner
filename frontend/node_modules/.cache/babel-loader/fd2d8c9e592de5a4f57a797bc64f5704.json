{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nfunction Board() {\n  const [state, setState] = React.useState(initialData);\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId]; //if moving within the same column\n\n    if (start === finish) {\n      const column = state.columns[source.droppableId];\n      const newplaceIds = Array.from(column.placeIds);\n      newplaceIds.splice(source.index, 1);\n      newplaceIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        placeIds: newplaceIds\n      };\n      const newState = { ...state,\n        columns: { ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setState(newState);\n      return;\n    } //moving from one list to another\n\n\n    const startplaceIds = Array.from(start.placeIds);\n    startplaceIds.splice(source.index, 1);\n    const newStart = { ...start,\n      placeIds: startplaceIds\n    };\n    const finishplaceIds = Array.from(finish.placeIds);\n    finishplaceIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish,\n      placeIds: finishplaceIds\n    };\n    const newState = { ...state,\n      columns: { ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    setState(newState);\n  };\n\n  const changeHandler = e => {\n    setState({ ...state,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  const clickHandler = async () => {\n    console.log('hello'); // https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors \n    // added proxy in package.json \"proxy\": \"https://maps.googleapis.com/maps/api\"\n\n    const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n    const place = state.place;\n    const type = state.type;\n    console.log(googlePlacesApi); // let response = await fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`)\n    // let data = await response.json()\n    // console.log(data.results.length);\n    // var placesFetched = {};\n    // var placeIds = [];\n    // for (var i = 0; i < data.results.length; i++) {\n    //     //object structure of place card is set here\n    //     var placeObject = {};\n    //     placeObject['id'] = `place-${i}`;\n    //     placeObject['content'] = data.results[i].name;\n    //     placeObject['rating'] = data.results[i].rating;\n    //     placeObject['photoRef'] = data.results[i].photos[0].photo_reference;\n    //     console.log(placeObject);\n    //     placeIds.push(`place-${i}`);\n    //     placesFetched[`place-${i}`] = placeObject;\n    //     //try requesting photo\n    //     // /place/photo?maxwidth=400&photoreference=&key=YOUR_API_KEY\n    //     // let imgResponse = await fetch(`/place/photo?maxwidth=1600&photoreference=${photoReference}&key=${googlePlacesApi}`)\n    //     // console.log(imgResponse);\n    // }\n    // const newState1 = {\n    //     ...this.state,\n    //     places: placesFetched,\n    //     columns: {\n    //         ...this.state.columns,\n    //         'data-1': {\n    //             ...this.state.columns['data-1'],\n    //             placeIds: placeIds\n    //         }\n    //     }\n    // }\n    // this.setState(newState1);\n    //setting number of columns\n\n    const columnsCount = state.number;\n    var columns = {};\n    var columnOrder = [];\n\n    for (var i = 0; i < columnsCount; i++) {\n      var dataObject = {};\n      dataObject['id'] = `column-${i}`;\n      dataObject['title'] = `Day ${i + 1}`;\n      dataObject['placeIds'] = [];\n      columns[`column-${i}`] = dataObject;\n      columnOrder.push(`column-${i}`);\n    }\n\n    const newState = { ...state,\n      columns: { ...state.columns,\n        ...columns\n      },\n      columnOrder: [...columnOrder]\n    };\n    console.log('help2');\n    console.log(newState);\n    setState(newState);\n    fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`).then(res => res.json()).then(data => {\n      console.log(data.results);\n      var placesFetched = {};\n      var placeIds = [];\n\n      for (var i = 0; i < data.results.length; i++) {\n        //object structure of place card is set here\n        var placeObject = {};\n        placeObject['id'] = `place-${i}`;\n        placeObject['content'] = data.results[i].name;\n        placeObject['rating'] = data.results[i].rating;\n        placeObject['photoRef'] = data.results[i].photos ? data.results[i].photos[0].photo_reference : \"0\";\n        console.log(placeObject);\n        placeIds.push(`place-${i}`);\n        placesFetched[`place-${i}`] = placeObject;\n      }\n\n      const newState = { ...state,\n        places: placesFetched,\n        columns: { ...state.columns,\n          'data-1': { ...state.columns['data-1'],\n            placeIds: placeIds\n          }\n        }\n      };\n      console.log('help1');\n      console.log(newState);\n      setState(newState);\n    }).catch(error => console.error(error));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"select-css\",\n    id: \"type\",\n    value: state.type,\n    onChange: changeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"Restaurants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"Restaurants\"), React.createElement(\"option\", {\n    value: \"Hotels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Hotels\"), React.createElement(\"option\", {\n    value: \"Tourist+attraction\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Tourist+attraction\")), React.createElement(\"input\", {\n    id: \"place\",\n    placeholder: \"City\",\n    type: \"text\",\n    value: state.place,\n    onChange: changeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"number\",\n    placeholder: \"No. of Days\",\n    type: \"text\",\n    value: state.number,\n    onChange: changeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: clickHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, state.columnOrder.map(columnId => {\n    const column = state.columns[columnId];\n    const places = column.placeIds.map(placeId => state.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, state.dataColumn.map(columnId => {\n    const column = state.columns[columnId];\n    const places = column.placeIds.map(placeId => state.places[placeId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      places: places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    });\n  }))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/dnd/src/Components/board.js"],"names":["React","Component","DragDropContext","initialData","Column","Board","state","setState","useState","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","column","newplaceIds","Array","from","placeIds","splice","newColumn","newState","id","startplaceIds","newStart","finishplaceIds","newFinish","changeHandler","e","target","value","clickHandler","console","log","googlePlacesApi","process","env","REACT_APP_GOOGLE_PLACES_API_KEY","place","type","columnsCount","number","columnOrder","i","dataObject","push","fetch","then","res","json","data","results","placesFetched","length","placeObject","name","rating","photos","photo_reference","places","catch","error","map","columnId","placeId","dataColumn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport initialData from '../Store/initial-data';\nimport Column from './column';\n\nfunction Board() {\n\n    const [state, setState] = React.useState(initialData);\n\n    const onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = state.columns[source.droppableId];\n        const finish = state.columns[destination.droppableId];\n\n        //if moving within the same column\n        if (start === finish) {\n            const column = state.columns[source.droppableId];\n            const newplaceIds = Array.from(column.placeIds);\n            newplaceIds.splice(source.index, 1);\n            newplaceIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...column,\n                placeIds: newplaceIds,\n            };\n\n            const newState = {\n                ...state,\n                columns: {\n                    ...state.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            setState(newState);\n            return;\n        }\n\n        //moving from one list to another\n        const startplaceIds = Array.from(start.placeIds);\n        startplaceIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            placeIds: startplaceIds,\n        };\n\n        const finishplaceIds = Array.from(finish.placeIds);\n        finishplaceIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            placeIds: finishplaceIds,\n        };\n\n\n        const newState = {\n            ...state,\n            columns: {\n                ...state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            },\n        };\n\n        setState(newState);\n    };\n\n    const changeHandler = (e) => {\n        setState({\n            ...state,\n            [e.target.id]: e.target.value\n        })\n    };\n\n    const clickHandler = async () => {\n        console.log('hello');\n\n        // https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors \n        // added proxy in package.json \"proxy\": \"https://maps.googleapis.com/maps/api\"\n        const googlePlacesApi = process.env.REACT_APP_GOOGLE_PLACES_API_KEY;\n        const place = state.place;\n        const type = state.type;\n        console.log(googlePlacesApi);\n\n        // let response = await fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`)\n        // let data = await response.json()\n\n        // console.log(data.results.length);\n\n        // var placesFetched = {};\n        // var placeIds = [];\n        \n        // for (var i = 0; i < data.results.length; i++) {\n\n        //     //object structure of place card is set here\n\n        //     var placeObject = {};\n        //     placeObject['id'] = `place-${i}`;\n        //     placeObject['content'] = data.results[i].name;\n        //     placeObject['rating'] = data.results[i].rating;\n        //     placeObject['photoRef'] = data.results[i].photos[0].photo_reference;\n        //     console.log(placeObject);\n        //     placeIds.push(`place-${i}`);\n        //     placesFetched[`place-${i}`] = placeObject;\n\n            \n        //     //try requesting photo\n        //     // /place/photo?maxwidth=400&photoreference=&key=YOUR_API_KEY\n        //     // let imgResponse = await fetch(`/place/photo?maxwidth=1600&photoreference=${photoReference}&key=${googlePlacesApi}`)\n        //     // console.log(imgResponse);\n        \n        \n        // }\n        \n\n        // const newState1 = {\n        //     ...this.state,\n        //     places: placesFetched,\n        //     columns: {\n        //         ...this.state.columns,\n        //         'data-1': {\n        //             ...this.state.columns['data-1'],\n        //             placeIds: placeIds\n\n        //         }\n        //     }\n        // }\n\n        // this.setState(newState1);\n\n        //setting number of columns\n\n        const columnsCount = state.number;\n\n        var columns = {};\n        var columnOrder = [];\n\n        for (var i = 0; i < columnsCount; i++) {\n            var dataObject = {};\n            dataObject['id'] = `column-${i}`;\n            dataObject['title'] = `Day ${i + 1}`;\n            dataObject['placeIds'] = [];\n\n            columns[`column-${i}`] = dataObject;\n            columnOrder.push(`column-${i}`);\n        }\n\n        const newState = {\n            ...state,\n            columns: {\n                ...state.columns,\n                ...columns,\n            },\n            columnOrder: [...columnOrder],\n        }\n\n        console.log('help2');\n        console.log(newState);\n\n        setState(newState);\n\n        fetch(`/place/textsearch/json?query=${type}+${place}&key=${googlePlacesApi}`)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data.results)\n\n                var placesFetched = {};\n                var placeIds = [];\n                \n                for (var i = 0; i < data.results.length; i++) {\n\n                    //object structure of place card is set here\n\n                    var placeObject = {};\n                    placeObject['id'] = `place-${i}`;\n                    placeObject['content'] = data.results[i].name;\n                    placeObject['rating'] = data.results[i].rating;\n                    placeObject['photoRef'] = data.results[i].photos ? data.results[i].photos[0].photo_reference : \"0\";\n                    console.log(placeObject);\n                    placeIds.push(`place-${i}`);\n                    placesFetched[`place-${i}`] = placeObject;\n                \n                }\n                \n                const newState = {\n                    ...state,\n                    places: placesFetched,\n                    columns: {\n                        ...state.columns,\n                        'data-1': {\n                            ...state.columns['data-1'],\n                            placeIds: placeIds\n                        },\n                    },\n                }\n\n                console.log('help1');\n                console.log(newState);\n\n                setState(newState);\n            })\n            .catch(error => console.error(error))\n    };\n\n\n    return (\n        <div>\n            <div>\n                <select className=\"select-css\" id='type' value={state.type} onChange={changeHandler}>\n                    <option value=\"Restaurants\">Restaurants</option>\n                    <option value=\"Hotels\">Hotels</option>\n                    <option value=\"Tourist+attraction\">Tourist+attraction</option>\n                </select>\n                <input id='place' placeholder='City' type=\"text\" value={state.place} onChange={changeHandler}/>\n                <input id='number' placeholder='No. of Days' type=\"text\" value={state.number} onChange={changeHandler}/>\n                <button type='submit' onClick={clickHandler}>Submit</button>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <div className='container'>\n                    {state.columnOrder.map(columnId => {\n                        const column = state.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            state.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n                <div className='container'>\n                    {state.dataColumn.map(columnId => {\n                        const column = state.columns[columnId];\n                        const places = column.placeIds.map(placeId => \n                            state.places[placeId]\n                        );\n\n                        return <Column key={column.id} column={column} places={places}/>\n                    })}\n                </div>\n            </DragDropContext>\n        </div>\n        \n    );\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}