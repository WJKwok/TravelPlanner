{"ast":null,"code":"var _jsxFileName = \"/Users/wen/Desktop/Projects/React/travelPlanner/dnd/src/Pages/register.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nfunction Register() {\n  const initialRegisterInput = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  const [registerInput, setRegisterInput] = useState(initialRegisterInput);\n  const [registerUser] = useMutation(REGISTER_USER, {\n    update(_, result) {\n      console.log(result);\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: registerInput\n  });\n\n  const inputChangeHandler = e => {\n    setRegisterInput({ ...registerInput,\n      [e.target.id]: e.target.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"username\"), React.createElement(\"input\", {\n    id: \"username\",\n    value: registerInput.username,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"email\"), React.createElement(\"input\", {\n    id: \"email\",\n    value: registerInput.email,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"password\"), React.createElement(\"input\", {\n    id: \"password\",\n    value: registerInput.password,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"confirm password\"), React.createElement(\"input\", {\n    id: \"confirmPassword\",\n    value: registerInput.confirmPassword,\n    onChange: inputChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: registerUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"submit\"));\n}\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ){\n        register(\n            registerInput:{\n            username: $username\n            email: $email\n            password: $password\n            confirmPassword: $confirmPassword\n            }\n        ){\n            id\n            email\n            token\n            username\n            createdAt\n        }\n    }\n`;\nexport default Register;","map":{"version":3,"sources":["/Users/wen/Desktop/Projects/React/travelPlanner/dnd/src/Pages/register.js"],"names":["React","useState","useMutation","gql","Register","initialRegisterInput","username","email","password","confirmPassword","registerInput","setRegisterInput","registerUser","REGISTER_USER","update","_","result","console","log","onError","err","variables","inputChangeHandler","e","target","id","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,SAASC,QAAT,GAAoB;AAEhB,QAAMC,oBAAoB,GAAG;AACzBC,IAAAA,QAAQ,EAAE,EADe;AAEzBC,IAAAA,KAAK,EAAE,EAFkB;AAGzBC,IAAAA,QAAQ,EAAE,EAHe;AAIzBC,IAAAA,eAAe,EAAE;AAJQ,GAA7B;AAOA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAACI,oBAAD,CAAlD;AACA,QAAM,CAACO,YAAD,IAAiBV,WAAW,CAACW,aAAD,EAAe;AAC7CC,IAAAA,MAAM,CAACC,CAAD,EAAIC,MAAJ,EAAW;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,KAH4C;;AAI7CG,IAAAA,OAAO,CAACC,GAAD,EAAK;AACRH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH,KAN4C;;AAO7CC,IAAAA,SAAS,EAAEX;AAPkC,GAAf,CAAlC;;AAUA,QAAMY,kBAAkB,GAAIC,CAAD,IAAO;AAC9BZ,IAAAA,gBAAgB,CAAC,EACb,GAAGD,aADU;AAEb,OAACa,CAAC,CAACC,MAAF,CAASC,EAAV,GAAeF,CAAC,CAACC,MAAF,CAASE;AAFX,KAAD,CAAhB;AAIH,GALD;;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,KAAK,EAAEhB,aAAa,CAACJ,QAA1C;AAAoD,IAAA,QAAQ,EAAEgB,kBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,EAKI;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,KAAK,EAAEZ,aAAa,CAACH,KAAvC;AAA8C,IAAA,QAAQ,EAAEe,kBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,EAOI;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,KAAK,EAAEZ,aAAa,CAACF,QAA1C;AAAoD,IAAA,QAAQ,EAAEc,kBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARJ,EASI;AAAO,IAAA,EAAE,EAAC,iBAAV;AAA4B,IAAA,KAAK,EAAEZ,aAAa,CAACD,eAAjD;AAAkE,IAAA,QAAQ,EAAEa,kBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI;AAAQ,IAAA,OAAO,EAAEV,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,CADJ;AAcH;;AAED,MAAMC,aAAa,GAAGV,GAAI;;;;;;;;;;;;;;;;;;;;;;CAA1B;AAwBA,eAAeC,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nfunction Register() {\n\n    const initialRegisterInput = {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    }\n\n    const [registerInput, setRegisterInput] = useState(initialRegisterInput);\n    const [registerUser] = useMutation(REGISTER_USER,{\n        update(_, result){\n            console.log(result);\n        },\n        onError(err){\n            console.log(err);\n        },\n        variables: registerInput\n    })\n\n    const inputChangeHandler = (e) => {\n        setRegisterInput({\n            ...registerInput,\n            [e.target.id]: e.target.value\n        })\n    }\n    \n    return (\n        <div>\n            <h1>Register</h1>\n            <p>username</p>\n            <input id='username' value={registerInput.username} onChange={inputChangeHandler}/>\n            <p>email</p>\n            <input id='email' value={registerInput.email} onChange={inputChangeHandler}/>\n            <p>password</p>\n            <input id='password' value={registerInput.password} onChange={inputChangeHandler}/>\n            <p>confirm password</p>\n            <input id='confirmPassword' value={registerInput.confirmPassword} onChange={inputChangeHandler}/>\n            <button onClick={registerUser}>submit</button>\n        </div>\n    );\n}\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ){\n        register(\n            registerInput:{\n            username: $username\n            email: $email\n            password: $password\n            confirmPassword: $confirmPassword\n            }\n        ){\n            id\n            email\n            token\n            username\n            createdAt\n        }\n    }\n`;\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}